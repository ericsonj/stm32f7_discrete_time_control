
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c7c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006e7c  08006e7c  00016e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006efc  08006efc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f04  08006f04  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f04  08006f04  00016f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f08  08006f08  00016f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  20000080  08006f8c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bd8  08006f8c  00024bd8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018293  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031e5  00000000  00000000  00038341  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001180  00000000  00000000  0003b528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001008  00000000  00000000  0003c6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028b99  00000000  00000000  0003d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f563  00000000  00000000  00066249  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdf54  00000000  00000000  000757ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173700  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a20  00000000  00000000  0017377c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08006e64 	.word	0x08006e64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08006e64 	.word	0x08006e64

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 fccf 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	200f      	movs	r0, #15
 80005fc:	f000 f806 	bl	800060c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f005 fdf2 	bl	80061e8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x54>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x58>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fcdb 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e00e      	b.n	8000658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d80a      	bhi.n	8000656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000648:	f000 fcb1 	bl	8000fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_InitTick+0x5c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000018 	.word	0x20000018
 8000664:	20000004 	.word	0x20000004
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x20>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_IncTick+0x24>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000004 	.word	0x20000004
 8000690:	20004ab0 	.word	0x20004ab0

08000694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <HAL_GetTick+0x14>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20004ab0 	.word	0x20004ab0

080006ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d101      	bne.n	80006c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	e031      	b.n	8000726 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f005 fdb4 	bl	8006238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	f003 0310 	and.w	r3, r3, #16
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d116      	bne.n	8000718 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_ADC_Init+0x84>)
 80006f0:	4013      	ands	r3, r2
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 faa0 	bl	8000c40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	e001      	b.n	800071c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	ffffeefd 	.word	0xffffeefd

08000734 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000746:	2b01      	cmp	r3, #1
 8000748:	d101      	bne.n	800074e <HAL_ADC_Start+0x1a>
 800074a:	2302      	movs	r3, #2
 800074c:	e0a0      	b.n	8000890 <HAL_ADC_Start+0x15c>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2201      	movs	r2, #1
 8000752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b01      	cmp	r3, #1
 8000762:	d018      	beq.n	8000796 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f042 0201 	orr.w	r2, r2, #1
 8000772:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000774:	4b49      	ldr	r3, [pc, #292]	; (800089c <HAL_ADC_Start+0x168>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a49      	ldr	r2, [pc, #292]	; (80008a0 <HAL_ADC_Start+0x16c>)
 800077a:	fba2 2303 	umull	r2, r3, r2, r3
 800077e:	0c9a      	lsrs	r2, r3, #18
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000788:	e002      	b.n	8000790 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3b01      	subs	r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f9      	bne.n	800078a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d174      	bne.n	800088e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007a8:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <HAL_ADC_Start+0x170>)
 80007aa:	4013      	ands	r3, r2
 80007ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d007      	beq.n	80007d2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007de:	d106      	bne.n	80007ee <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e4:	f023 0206 	bic.w	r2, r3, #6
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	645a      	str	r2, [r3, #68]	; 0x44
 80007ec:	e002      	b.n	80007f4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000804:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <HAL_ADC_Start+0x174>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	2b00      	cmp	r3, #0
 8000810:	d10f      	bne.n	8000832 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d136      	bne.n	800088e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	689a      	ldr	r2, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	e02d      	b.n	800088e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <HAL_ADC_Start+0x178>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d10e      	bne.n	800085a <HAL_ADC_Start+0x126>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d107      	bne.n	800085a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000858:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <HAL_ADC_Start+0x174>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	2b00      	cmp	r3, #0
 8000864:	d113      	bne.n	800088e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <HAL_ADC_Start+0x17c>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d10e      	bne.n	800088e <HAL_ADC_Start+0x15a>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d107      	bne.n	800088e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800088c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	20000018 	.word	0x20000018
 80008a0:	431bde83 	.word	0x431bde83
 80008a4:	fffff8fe 	.word	0xfffff8fe
 80008a8:	40012300 	.word	0x40012300
 80008ac:	40012000 	.word	0x40012000
 80008b0:	40012200 	.word	0x40012200

080008b4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008d0:	d113      	bne.n	80008fa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008e0:	d10b      	bne.n	80008fa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f043 0220 	orr.w	r2, r3, #32
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e05c      	b.n	80009b4 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80008fa:	f7ff fecb 	bl	8000694 <HAL_GetTick>
 80008fe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000900:	e01a      	b.n	8000938 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000908:	d016      	beq.n	8000938 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d007      	beq.n	8000920 <HAL_ADC_PollForConversion+0x6c>
 8000910:	f7ff fec0 	bl	8000694 <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	d20b      	bcs.n	8000938 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f043 0204 	orr.w	r2, r3, #4
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000934:	2303      	movs	r3, #3
 8000936:	e03d      	b.n	80009b4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	2b02      	cmp	r3, #2
 8000944:	d1dd      	bne.n	8000902 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f06f 0212 	mvn.w	r2, #18
 800094e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d123      	bne.n	80009b2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800096e:	2b00      	cmp	r3, #0
 8000970:	d11f      	bne.n	80009b2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800097c:	2b00      	cmp	r3, #0
 800097e:	d006      	beq.n	800098e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800098a:	2b00      	cmp	r3, #0
 800098c:	d111      	bne.n	80009b2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d105      	bne.n	80009b2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f043 0201 	orr.w	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d101      	bne.n	80009f4 <HAL_ADC_ConfigChannel+0x1c>
 80009f0:	2302      	movs	r3, #2
 80009f2:	e115      	b.n	8000c20 <HAL_ADC_ConfigChannel+0x248>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2201      	movs	r2, #1
 80009f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b09      	cmp	r3, #9
 8000a02:	d935      	bls.n	8000a70 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68d9      	ldr	r1, [r3, #12]
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	3b1e      	subs	r3, #30
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43da      	mvns	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	400a      	ands	r2, r1
 8000a28:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a7f      	ldr	r2, [pc, #508]	; (8000c2c <HAL_ADC_ConfigChannel+0x254>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d10a      	bne.n	8000a4a <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68d9      	ldr	r1, [r3, #12]
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	061a      	lsls	r2, r3, #24
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	430a      	orrs	r2, r1
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	e035      	b.n	8000ab6 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68d9      	ldr	r1, [r3, #12]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4403      	add	r3, r0
 8000a62:	3b1e      	subs	r3, #30
 8000a64:	409a      	lsls	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	e022      	b.n	8000ab6 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	6919      	ldr	r1, [r3, #16]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	2207      	movs	r2, #7
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	400a      	ands	r2, r1
 8000a92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6919      	ldr	r1, [r3, #16]
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4403      	add	r3, r0
 8000aac:	409a      	lsls	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d824      	bhi.n	8000b08 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	3b05      	subs	r3, #5
 8000ad0:	221f      	movs	r2, #31
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	400a      	ands	r2, r1
 8000ade:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	3b05      	subs	r3, #5
 8000afa:	fa00 f203 	lsl.w	r2, r0, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	430a      	orrs	r2, r1
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
 8000b06:	e04c      	b.n	8000ba2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2b0c      	cmp	r3, #12
 8000b0e:	d824      	bhi.n	8000b5a <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	3b23      	subs	r3, #35	; 0x23
 8000b22:	221f      	movs	r2, #31
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43da      	mvns	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	400a      	ands	r2, r1
 8000b30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	3b23      	subs	r3, #35	; 0x23
 8000b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	430a      	orrs	r2, r1
 8000b56:	631a      	str	r2, [r3, #48]	; 0x30
 8000b58:	e023      	b.n	8000ba2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	3b41      	subs	r3, #65	; 0x41
 8000b6c:	221f      	movs	r2, #31
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	400a      	ands	r2, r1
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	3b41      	subs	r3, #65	; 0x41
 8000b96:	fa00 f203 	lsl.w	r2, r0, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <HAL_ADC_ConfigChannel+0x258>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d109      	bne.n	8000bc0 <HAL_ADC_ConfigChannel+0x1e8>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b12      	cmp	r3, #18
 8000bb2:	d105      	bne.n	8000bc0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <HAL_ADC_ConfigChannel+0x25c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <HAL_ADC_ConfigChannel+0x25c>)
 8000bba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bbe:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1a      	ldr	r2, [pc, #104]	; (8000c30 <HAL_ADC_ConfigChannel+0x258>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d125      	bne.n	8000c16 <HAL_ADC_ConfigChannel+0x23e>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_ADC_ConfigChannel+0x254>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d003      	beq.n	8000bdc <HAL_ADC_ConfigChannel+0x204>
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b11      	cmp	r3, #17
 8000bda:	d11c      	bne.n	8000c16 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_ADC_ConfigChannel+0x25c>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <HAL_ADC_ConfigChannel+0x25c>)
 8000be2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000be6:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <HAL_ADC_ConfigChannel+0x254>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d111      	bne.n	8000c16 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_ADC_ConfigChannel+0x260>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <HAL_ADC_ConfigChannel+0x264>)
 8000bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfc:	0c9a      	lsrs	r2, r3, #18
 8000bfe:	4613      	mov	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000c08:	e002      	b.n	8000c10 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f9      	bne.n	8000c0a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	10000012 	.word	0x10000012
 8000c30:	40012000 	.word	0x40012000
 8000c34:	40012300 	.word	0x40012300
 8000c38:	20000018 	.word	0x20000018
 8000c3c:	431bde83 	.word	0x431bde83

08000c40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000c48:	4b78      	ldr	r3, [pc, #480]	; (8000e2c <ADC_Init+0x1ec>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	4a77      	ldr	r2, [pc, #476]	; (8000e2c <ADC_Init+0x1ec>)
 8000c4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c52:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000c54:	4b75      	ldr	r3, [pc, #468]	; (8000e2c <ADC_Init+0x1ec>)
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	4973      	ldr	r1, [pc, #460]	; (8000e2c <ADC_Init+0x1ec>)
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6859      	ldr	r1, [r3, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	021a      	lsls	r2, r3, #8
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6859      	ldr	r1, [r3, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6899      	ldr	r1, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cce:	4a58      	ldr	r2, [pc, #352]	; (8000e30 <ADC_Init+0x1f0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d022      	beq.n	8000d1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ce2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6899      	ldr	r1, [r3, #8]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6899      	ldr	r1, [r3, #8]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	e00f      	b.n	8000d3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 0202 	bic.w	r2, r2, #2
 8000d48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6899      	ldr	r1, [r3, #8]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	005a      	lsls	r2, r3, #1
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d01b      	beq.n	8000da0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6859      	ldr	r1, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	3b01      	subs	r3, #1
 8000d94:	035a      	lsls	r2, r3, #13
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	e007      	b.n	8000db0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	051a      	lsls	r2, r3, #20
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000de4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6899      	ldr	r1, [r3, #8]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000df2:	025a      	lsls	r2, r3, #9
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6899      	ldr	r1, [r3, #8]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	029a      	lsls	r2, r3, #10
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	609a      	str	r2, [r3, #8]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	40012300 	.word	0x40012300
 8000e30:	0f000001 	.word	0x0f000001

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <__NVIC_SetPriorityGrouping+0x40>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x40>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	05fa0000 	.word	0x05fa0000

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff47 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff5c 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff8e 	bl	8000eec <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5d 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffb0 	bl	8000f54 <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e014      	b.n	800103a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	791b      	ldrb	r3, [r3, #4]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d105      	bne.n	8001026 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f005 f949 	bl	80062b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2202      	movs	r2, #2
 800102a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0, tmp2 = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	795b      	ldrb	r3, [r3, #5]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <HAL_DAC_Start+0x1e>
 800105c:	2302      	movs	r3, #2
 800105e:	e050      	b.n	8001102 <HAL_DAC_Start+0xc0>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2202      	movs	r2, #2
 800106a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6819      	ldr	r1, [r3, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	409a      	lsls	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d11a      	bne.n	80010bc <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800109c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d127      	bne.n	80010f4 <HAL_DAC_Start+0xb2>
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2b38      	cmp	r3, #56	; 0x38
 80010a8:	d124      	bne.n	80010f4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f042 0201 	orr.w	r2, r2, #1
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	e01b      	b.n	80010f4 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c6:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80010d2:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80010da:	d10b      	bne.n	80010f4 <HAL_DAC_Start+0xb2>
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80010e2:	d107      	bne.n	80010f4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0202 	orr.w	r2, r2, #2
 80010f2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800110e:	b480      	push	{r7}
 8001110:	b087      	sub	sp, #28
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	795b      	ldrb	r3, [r3, #5]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_DAC_ConfigChannel+0x20>
 800112a:	2302      	movs	r3, #2
 800112c:	e036      	b.n	800119c <HAL_DAC_ConfigChannel+0x8e>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2201      	movs	r2, #1
 8001132:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2202      	movs	r2, #2
 8001138:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001142:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	4313      	orrs	r3, r2
 800116c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6819      	ldr	r1, [r3, #0]
 800117c:	22c0      	movs	r2, #192	; 0xc0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43da      	mvns	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	400a      	ands	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d105      	bne.n	80011d2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	3308      	adds	r3, #8
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	e004      	b.n	80011dc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	3314      	adds	r3, #20
 80011da:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	461a      	mov	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	371c      	adds	r7, #28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e175      	b.n	8001500 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8164 	bne.w	80014fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x4e>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b12      	cmp	r3, #18
 8001240:	d123      	bne.n	800128a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691a      	ldr	r2, [r3, #16]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	69b9      	ldr	r1, [r7, #24]
 8001286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0203 	and.w	r2, r3, #3
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d00b      	beq.n	80012de <HAL_GPIO_Init+0xea>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d2:	2b11      	cmp	r3, #17
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b12      	cmp	r3, #18
 80012dc:	d130      	bne.n	8001340 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 0201 	and.w	r2, r3, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80be 	beq.w	80014fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b65      	ldr	r3, [pc, #404]	; (8001514 <HAL_GPIO_Init+0x320>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a64      	ldr	r2, [pc, #400]	; (8001514 <HAL_GPIO_Init+0x320>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b62      	ldr	r3, [pc, #392]	; (8001514 <HAL_GPIO_Init+0x320>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001396:	4a60      	ldr	r2, [pc, #384]	; (8001518 <HAL_GPIO_Init+0x324>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a57      	ldr	r2, [pc, #348]	; (800151c <HAL_GPIO_Init+0x328>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d037      	beq.n	8001432 <HAL_GPIO_Init+0x23e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a56      	ldr	r2, [pc, #344]	; (8001520 <HAL_GPIO_Init+0x32c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d031      	beq.n	800142e <HAL_GPIO_Init+0x23a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a55      	ldr	r2, [pc, #340]	; (8001524 <HAL_GPIO_Init+0x330>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d02b      	beq.n	800142a <HAL_GPIO_Init+0x236>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a54      	ldr	r2, [pc, #336]	; (8001528 <HAL_GPIO_Init+0x334>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d025      	beq.n	8001426 <HAL_GPIO_Init+0x232>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a53      	ldr	r2, [pc, #332]	; (800152c <HAL_GPIO_Init+0x338>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01f      	beq.n	8001422 <HAL_GPIO_Init+0x22e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a52      	ldr	r2, [pc, #328]	; (8001530 <HAL_GPIO_Init+0x33c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x22a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a51      	ldr	r2, [pc, #324]	; (8001534 <HAL_GPIO_Init+0x340>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x226>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a50      	ldr	r2, [pc, #320]	; (8001538 <HAL_GPIO_Init+0x344>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x222>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4f      	ldr	r2, [pc, #316]	; (800153c <HAL_GPIO_Init+0x348>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x21e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4e      	ldr	r2, [pc, #312]	; (8001540 <HAL_GPIO_Init+0x34c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x21a>
 800140a:	2309      	movs	r3, #9
 800140c:	e012      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800140e:	230a      	movs	r3, #10
 8001410:	e010      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001412:	2308      	movs	r3, #8
 8001414:	e00e      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001416:	2307      	movs	r3, #7
 8001418:	e00c      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800141a:	2306      	movs	r3, #6
 800141c:	e00a      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800141e:	2305      	movs	r3, #5
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001422:	2304      	movs	r3, #4
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001444:	4934      	ldr	r1, [pc, #208]	; (8001518 <HAL_GPIO_Init+0x324>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <HAL_GPIO_Init+0x350>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <HAL_GPIO_Init+0x350>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_GPIO_Init+0x350>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a0:	4a28      	ldr	r2, [pc, #160]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ca:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f ae86 	bls.w	8001214 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	3724      	adds	r7, #36	; 0x24
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40023800 	.word	0x40023800
 8001518:	40013800 	.word	0x40013800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40020800 	.word	0x40020800
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40021000 	.word	0x40021000
 8001530:	40021400 	.word	0x40021400
 8001534:	40021800 	.word	0x40021800
 8001538:	40021c00 	.word	0x40021c00
 800153c:	40022000 	.word	0x40022000
 8001540:	40022400 	.word	0x40022400
 8001544:	40013c00 	.word	0x40013c00

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	401a      	ands	r2, r3
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	429a      	cmp	r2, r3
 8001592:	d104      	bne.n	800159e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	041a      	lsls	r2, r3, #16
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40007000 	.word	0x40007000

080015d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <HAL_PWREx_EnableOverDrive+0x98>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a22      	ldr	r2, [pc, #136]	; (8001668 <HAL_PWREx_EnableOverDrive+0x98>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_PWREx_EnableOverDrive+0x98>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015fe:	f7ff f849 	bl	8000694 <HAL_GetTick>
 8001602:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001604:	e009      	b.n	800161a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001606:	f7ff f845 	bl	8000694 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001614:	d901      	bls.n	800161a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e022      	b.n	8001660 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_PWREx_EnableOverDrive+0x9c>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001626:	d1ee      	bne.n	8001606 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_PWREx_EnableOverDrive+0x9c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0f      	ldr	r2, [pc, #60]	; (800166c <HAL_PWREx_EnableOverDrive+0x9c>)
 800162e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001632:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001634:	f7ff f82e 	bl	8000694 <HAL_GetTick>
 8001638:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800163a:	e009      	b.n	8001650 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800163c:	f7ff f82a 	bl	8000694 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800164a:	d901      	bls.n	8001650 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e007      	b.n	8001660 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800165c:	d1ee      	bne.n	800163c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000

08001670 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e25e      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8087 	beq.w	80017a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001694:	4b96      	ldr	r3, [pc, #600]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b04      	cmp	r3, #4
 800169e:	d00c      	beq.n	80016ba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a0:	4b93      	ldr	r3, [pc, #588]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d112      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62>
 80016ac:	4b90      	ldr	r3, [pc, #576]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b8:	d10b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ba:	4b8d      	ldr	r3, [pc, #564]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d06c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x130>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d168      	bne.n	80017a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e238      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x7a>
 80016dc:	4b84      	ldr	r3, [pc, #528]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a83      	ldr	r2, [pc, #524]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e02e      	b.n	8001748 <HAL_RCC_OscConfig+0xd8>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x9c>
 80016f2:	4b7f      	ldr	r3, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7e      	ldr	r2, [pc, #504]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80016f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b7c      	ldr	r3, [pc, #496]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a7b      	ldr	r2, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xd8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0xc0>
 8001716:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a75      	ldr	r2, [pc, #468]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xd8>
 8001730:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a6b      	ldr	r2, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7fe ffa0 	bl	8000694 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001758:	f7fe ff9c 	bl	8000694 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1ec      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xe8>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7fe ff8c 	bl	8000694 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7fe ff88 	bl	8000694 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1d8      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x110>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d069      	beq.n	8001882 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ae:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x190>
 80017c6:	4b4a      	ldr	r3, [pc, #296]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x17a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1ac      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	493d      	ldr	r1, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e040      	b.n	8001882 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d023      	beq.n	8001850 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a38      	ldr	r2, [pc, #224]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7fe ff3e 	bl	8000694 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181c:	f7fe ff3a 	bl	8000694 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e18a      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4929      	ldr	r1, [pc, #164]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
 800184e:	e018      	b.n	8001882 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7fe ff1a 	bl	8000694 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001864:	f7fe ff16 	bl	8000694 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e166      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d038      	beq.n	8001900 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d019      	beq.n	80018ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7fe fef7 	bl	8000694 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018aa:	f7fe fef3 	bl	8000694 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e143      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80018be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x23a>
 80018c8:	e01a      	b.n	8001900 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80018cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7fe fedd 	bl	8000694 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018de:	f7fe fed9 	bl	8000694 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d903      	bls.n	80018f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e129      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
 80018f0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f4:	4b95      	ldr	r3, [pc, #596]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 80018f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ee      	bne.n	80018de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80a4 	beq.w	8001a56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190e:	4b8f      	ldr	r3, [pc, #572]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10d      	bne.n	8001936 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a8b      	ldr	r2, [pc, #556]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b89      	ldr	r3, [pc, #548]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001932:	2301      	movs	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001936:	4b86      	ldr	r3, [pc, #536]	; (8001b50 <HAL_RCC_OscConfig+0x4e0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d118      	bne.n	8001974 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001942:	4b83      	ldr	r3, [pc, #524]	; (8001b50 <HAL_RCC_OscConfig+0x4e0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a82      	ldr	r2, [pc, #520]	; (8001b50 <HAL_RCC_OscConfig+0x4e0>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194e:	f7fe fea1 	bl	8000694 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001956:	f7fe fe9d 	bl	8000694 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b64      	cmp	r3, #100	; 0x64
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0ed      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001968:	4b79      	ldr	r3, [pc, #484]	; (8001b50 <HAL_RCC_OscConfig+0x4e0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x31a>
 800197c:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a72      	ldr	r2, [pc, #456]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	e02d      	b.n	80019e6 <HAL_RCC_OscConfig+0x376>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x33c>
 8001992:	4b6e      	ldr	r3, [pc, #440]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	4a6d      	ldr	r2, [pc, #436]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	6713      	str	r3, [r2, #112]	; 0x70
 800199e:	4b6b      	ldr	r3, [pc, #428]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a6a      	ldr	r2, [pc, #424]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
 80019aa:	e01c      	b.n	80019e6 <HAL_RCC_OscConfig+0x376>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d10c      	bne.n	80019ce <HAL_RCC_OscConfig+0x35e>
 80019b4:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b8:	4a64      	ldr	r2, [pc, #400]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6713      	str	r3, [r2, #112]	; 0x70
 80019c0:	4b62      	ldr	r3, [pc, #392]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4a61      	ldr	r2, [pc, #388]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6713      	str	r3, [r2, #112]	; 0x70
 80019cc:	e00b      	b.n	80019e6 <HAL_RCC_OscConfig+0x376>
 80019ce:	4b5f      	ldr	r3, [pc, #380]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d2:	4a5e      	ldr	r2, [pc, #376]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	6713      	str	r3, [r2, #112]	; 0x70
 80019da:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	4a5b      	ldr	r2, [pc, #364]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d015      	beq.n	8001a1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7fe fe51 	bl	8000694 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7fe fe4d 	bl	8000694 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e09b      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0c:	4b4f      	ldr	r3, [pc, #316]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0ee      	beq.n	80019f6 <HAL_RCC_OscConfig+0x386>
 8001a18:	e014      	b.n	8001a44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7fe fe3b 	bl	8000694 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a20:	e00a      	b.n	8001a38 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7fe fe37 	bl	8000694 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e085      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a38:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1ee      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a44:	7dfb      	ldrb	r3, [r7, #23]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d105      	bne.n	8001a56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4a:	4b40      	ldr	r3, [pc, #256]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a3f      	ldr	r2, [pc, #252]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d071      	beq.n	8001b42 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d069      	beq.n	8001b3e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d14b      	bne.n	8001b0a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a72:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a35      	ldr	r2, [pc, #212]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001a78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fe09 	bl	8000694 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a86:	f7fe fe05 	bl	8000694 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e055      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a98:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69da      	ldr	r2, [r3, #28]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	019b      	lsls	r3, r3, #6
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	3b01      	subs	r3, #1
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	061b      	lsls	r3, r3, #24
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	071b      	lsls	r3, r3, #28
 8001ad0:	491e      	ldr	r1, [pc, #120]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001adc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7fe fdd7 	bl	8000694 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aea:	f7fe fdd3 	bl	8000694 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e023      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x47a>
 8001b08:	e01b      	b.n	8001b42 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7fe fdbd 	bl	8000694 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7fe fdb9 	bl	8000694 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e009      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_RCC_OscConfig+0x4dc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4ae>
 8001b3c:	e001      	b.n	8001b42 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40007000 	.word	0x40007000

08001b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0ce      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b69      	ldr	r3, [pc, #420]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d910      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b66      	ldr	r3, [pc, #408]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 020f 	bic.w	r2, r3, #15
 8001b82:	4964      	ldr	r1, [pc, #400]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0b6      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb4:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a57      	ldr	r2, [pc, #348]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bcc:	4b52      	ldr	r3, [pc, #328]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b4f      	ldr	r3, [pc, #316]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	494c      	ldr	r1, [pc, #304]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d040      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b46      	ldr	r3, [pc, #280]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d115      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e07d      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c16:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e071      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c26:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e069      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c36:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 0203 	bic.w	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4935      	ldr	r1, [pc, #212]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c48:	f7fe fd24 	bl	8000694 <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c50:	f7fe fd20 	bl	8000694 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e051      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 020c 	and.w	r2, r3, #12
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d1eb      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d210      	bcs.n	8001ca8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 020f 	bic.w	r2, r3, #15
 8001c8e:	4921      	ldr	r1, [pc, #132]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e030      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4915      	ldr	r1, [pc, #84]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d009      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	490d      	ldr	r1, [pc, #52]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ce6:	f000 f81d 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8001cea:	4601      	mov	r1, r0
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1c8>)
 8001cf8:	5cd3      	ldrb	r3, [r2, r3]
 8001cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_RCC_ClockConfig+0x1cc>)
 8001d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d02:	200f      	movs	r0, #15
 8001d04:	f7fe fc82 	bl	800060c <HAL_InitTick>

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023c00 	.word	0x40023c00
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	08006eb0 	.word	0x08006eb0
 8001d20:	20000018 	.word	0x20000018

08001d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d007      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x32>
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d008      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x38>
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 80b4 	bne.w	8001eb8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b5e      	ldr	r3, [pc, #376]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d52:	60bb      	str	r3, [r7, #8]
       break;
 8001d54:	e0b3      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d56:	4b5e      	ldr	r3, [pc, #376]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001d58:	60bb      	str	r3, [r7, #8]
      break;
 8001d5a:	e0b0      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d5c:	4b5a      	ldr	r3, [pc, #360]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d64:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d66:	4b58      	ldr	r3, [pc, #352]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d04a      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d72:	4b55      	ldr	r3, [pc, #340]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	099b      	lsrs	r3, r3, #6
 8001d78:	f04f 0400 	mov.w	r4, #0
 8001d7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	ea03 0501 	and.w	r5, r3, r1
 8001d88:	ea04 0602 	and.w	r6, r4, r2
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	4632      	mov	r2, r6
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	f04f 0400 	mov.w	r4, #0
 8001d98:	0154      	lsls	r4, r2, #5
 8001d9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d9e:	014b      	lsls	r3, r1, #5
 8001da0:	4619      	mov	r1, r3
 8001da2:	4622      	mov	r2, r4
 8001da4:	1b49      	subs	r1, r1, r5
 8001da6:	eb62 0206 	sbc.w	r2, r2, r6
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	f04f 0400 	mov.w	r4, #0
 8001db2:	0194      	lsls	r4, r2, #6
 8001db4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001db8:	018b      	lsls	r3, r1, #6
 8001dba:	1a5b      	subs	r3, r3, r1
 8001dbc:	eb64 0402 	sbc.w	r4, r4, r2
 8001dc0:	f04f 0100 	mov.w	r1, #0
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	00e2      	lsls	r2, r4, #3
 8001dca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dce:	00d9      	lsls	r1, r3, #3
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4614      	mov	r4, r2
 8001dd4:	195b      	adds	r3, r3, r5
 8001dd6:	eb44 0406 	adc.w	r4, r4, r6
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	0262      	lsls	r2, r4, #9
 8001de4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001de8:	0259      	lsls	r1, r3, #9
 8001dea:	460b      	mov	r3, r1
 8001dec:	4614      	mov	r4, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	4621      	mov	r1, r4
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f04f 0400 	mov.w	r4, #0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	f7fe fa78 	bl	80002f0 <__aeabi_uldivmod>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e049      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e08:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	f04f 0400 	mov.w	r4, #0
 8001e12:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	ea03 0501 	and.w	r5, r3, r1
 8001e1e:	ea04 0602 	and.w	r6, r4, r2
 8001e22:	4629      	mov	r1, r5
 8001e24:	4632      	mov	r2, r6
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	f04f 0400 	mov.w	r4, #0
 8001e2e:	0154      	lsls	r4, r2, #5
 8001e30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e34:	014b      	lsls	r3, r1, #5
 8001e36:	4619      	mov	r1, r3
 8001e38:	4622      	mov	r2, r4
 8001e3a:	1b49      	subs	r1, r1, r5
 8001e3c:	eb62 0206 	sbc.w	r2, r2, r6
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	f04f 0400 	mov.w	r4, #0
 8001e48:	0194      	lsls	r4, r2, #6
 8001e4a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e4e:	018b      	lsls	r3, r1, #6
 8001e50:	1a5b      	subs	r3, r3, r1
 8001e52:	eb64 0402 	sbc.w	r4, r4, r2
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	00e2      	lsls	r2, r4, #3
 8001e60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e64:	00d9      	lsls	r1, r3, #3
 8001e66:	460b      	mov	r3, r1
 8001e68:	4614      	mov	r4, r2
 8001e6a:	195b      	adds	r3, r3, r5
 8001e6c:	eb44 0406 	adc.w	r4, r4, r6
 8001e70:	f04f 0100 	mov.w	r1, #0
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	02a2      	lsls	r2, r4, #10
 8001e7a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e7e:	0299      	lsls	r1, r3, #10
 8001e80:	460b      	mov	r3, r1
 8001e82:	4614      	mov	r4, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	4621      	mov	r1, r4
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f04f 0400 	mov.w	r4, #0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4623      	mov	r3, r4
 8001e92:	f7fe fa2d 	bl	80002f0 <__aeabi_uldivmod>
 8001e96:	4603      	mov	r3, r0
 8001e98:	460c      	mov	r4, r1
 8001e9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	60bb      	str	r3, [r7, #8]
      break;
 8001eb6:	e002      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001eba:	60bb      	str	r3, [r7, #8]
      break;
 8001ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	00f42400 	.word	0x00f42400
 8001ed0:	007a1200 	.word	0x007a1200

08001ed4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000018 	.word	0x20000018

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0a9b      	lsrs	r3, r3, #10
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	08006ec0 	.word	0x08006ec0

08001f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f18:	f7ff ffdc 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0b5b      	lsrs	r3, r3, #13
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	08006ec0 	.word	0x08006ec0

08001f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d012      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f64:	4b69      	ldr	r3, [pc, #420]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a68      	ldr	r2, [pc, #416]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f6e:	6093      	str	r3, [r2, #8]
 8001f70:	4b66      	ldr	r3, [pc, #408]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f78:	4964      	ldr	r1, [pc, #400]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d017      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f96:	4b5d      	ldr	r3, [pc, #372]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	4959      	ldr	r1, [pc, #356]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fb4:	d101      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d017      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fd2:	4b4e      	ldr	r3, [pc, #312]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	494a      	ldr	r1, [pc, #296]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800200e:	2301      	movs	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 808b 	beq.w	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b3a      	ldr	r3, [pc, #232]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	4a39      	ldr	r2, [pc, #228]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	6413      	str	r3, [r2, #64]	; 0x40
 800202c:	4b37      	ldr	r3, [pc, #220]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a34      	ldr	r2, [pc, #208]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800203e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002044:	f7fe fb26 	bl	8000694 <HAL_GetTick>
 8002048:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204c:	f7fe fb22 	bl	8000694 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e38d      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800206a:	4b28      	ldr	r3, [pc, #160]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d035      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d02e      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002088:	4b20      	ldr	r3, [pc, #128]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002090:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a1a      	ldr	r2, [pc, #104]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80020aa:	4a18      	ldr	r2, [pc, #96]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d114      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe faea 	bl	8000694 <HAL_GetTick>
 80020c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7fe fae6 	bl	8000694 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e34f      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0ee      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020f2:	d111      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002102:	400b      	ands	r3, r1
 8002104:	4901      	ldr	r1, [pc, #4]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e00b      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000
 8002114:	0ffffcff 	.word	0x0ffffcff
 8002118:	4bb3      	ldr	r3, [pc, #716]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4ab2      	ldr	r2, [pc, #712]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800211e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002122:	6093      	str	r3, [r2, #8]
 8002124:	4bb0      	ldr	r3, [pc, #704]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002130:	49ad      	ldr	r1, [pc, #692]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002132:	4313      	orrs	r3, r2
 8002134:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002142:	4ba9      	ldr	r3, [pc, #676]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002148:	4aa7      	ldr	r2, [pc, #668]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800214a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002152:	4ba5      	ldr	r3, [pc, #660]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002154:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	49a2      	ldr	r1, [pc, #648]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002170:	4b9d      	ldr	r3, [pc, #628]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800217e:	499a      	ldr	r1, [pc, #616]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002192:	4b95      	ldr	r3, [pc, #596]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021a0:	4991      	ldr	r1, [pc, #580]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021b4:	4b8c      	ldr	r3, [pc, #560]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c2:	4989      	ldr	r1, [pc, #548]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021d6:	4b84      	ldr	r3, [pc, #528]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4980      	ldr	r1, [pc, #512]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f8:	4b7b      	ldr	r3, [pc, #492]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	f023 0203 	bic.w	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4978      	ldr	r1, [pc, #480]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800221a:	4b73      	ldr	r3, [pc, #460]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	f023 020c 	bic.w	r2, r3, #12
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002228:	496f      	ldr	r1, [pc, #444]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	4967      	ldr	r1, [pc, #412]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800225e:	4b62      	ldr	r3, [pc, #392]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226c:	495e      	ldr	r1, [pc, #376]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002280:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	4956      	ldr	r1, [pc, #344]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80022a2:	4b51      	ldr	r3, [pc, #324]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	494d      	ldr	r1, [pc, #308]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80022c4:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	4945      	ldr	r1, [pc, #276]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80022e6:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f4:	493c      	ldr	r1, [pc, #240]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00a      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002308:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002316:	4934      	ldr	r1, [pc, #208]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d011      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800232a:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002338:	492b      	ldr	r1, [pc, #172]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002348:	d101      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800236a:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002378:	491b      	ldr	r1, [pc, #108]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00b      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800239c:	4912      	ldr	r1, [pc, #72]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00b      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c0:	4909      	ldr	r1, [pc, #36]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00f      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	e002      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	4985      	ldr	r1, [pc, #532]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00b      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002400:	4b80      	ldr	r3, [pc, #512]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002406:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002410:	497c      	ldr	r1, [pc, #496]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d005      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002426:	f040 80d6 	bne.w	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800242a:	4b76      	ldr	r3, [pc, #472]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a75      	ldr	r2, [pc, #468]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002430:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002436:	f7fe f92d 	bl	8000694 <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800243e:	f7fe f929 	bl	8000694 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b64      	cmp	r3, #100	; 0x64
 800244a:	d901      	bls.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e194      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002450:	4b6c      	ldr	r3, [pc, #432]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f0      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d021      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246c:	2b00      	cmp	r3, #0
 800246e:	d11d      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002470:	4b64      	ldr	r3, [pc, #400]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800247e:	4b61      	ldr	r3, [pc, #388]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002484:	0e1b      	lsrs	r3, r3, #24
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	019a      	lsls	r2, r3, #6
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	071b      	lsls	r3, r3, #28
 80024a4:	4957      	ldr	r1, [pc, #348]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d02e      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d6:	d129      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024d8:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80024da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024de:	0c1b      	lsrs	r3, r3, #16
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80024e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ec:	0f1b      	lsrs	r3, r3, #28
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	019a      	lsls	r2, r3, #6
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	431a      	orrs	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	071b      	lsls	r3, r3, #28
 800250c:	493d      	ldr	r1, [pc, #244]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002514:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800251a:	f023 021f 	bic.w	r2, r3, #31
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	3b01      	subs	r3, #1
 8002524:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01d      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002538:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800253a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800253e:	0e1b      	lsrs	r3, r3, #24
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002546:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254c:	0f1b      	lsrs	r3, r3, #28
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	019a      	lsls	r2, r3, #6
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	061b      	lsls	r3, r3, #24
 8002566:	431a      	orrs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	071b      	lsls	r3, r3, #28
 800256c:	4925      	ldr	r1, [pc, #148]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d011      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	019a      	lsls	r2, r3, #6
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	071b      	lsls	r3, r3, #28
 800259c:	4919      	ldr	r1, [pc, #100]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a16      	ldr	r2, [pc, #88]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b0:	f7fe f870 	bl	8000694 <HAL_GetTick>
 80025b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025b8:	f7fe f86c 	bl	8000694 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e0d7      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	f040 80cd 	bne.w	8002778 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ea:	f7fe f853 	bl	8000694 <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025f2:	f7fe f84f 	bl	8000694 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b64      	cmp	r3, #100	; 0x64
 80025fe:	d903      	bls.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0ba      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002604:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002614:	d0ed      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002632:	2b00      	cmp	r3, #0
 8002634:	d02e      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d12a      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800263e:	4b51      	ldr	r3, [pc, #324]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	0c1b      	lsrs	r3, r3, #16
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800264c:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	0f1b      	lsrs	r3, r3, #28
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	019a      	lsls	r2, r3, #6
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	061b      	lsls	r3, r3, #24
 800266c:	431a      	orrs	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	071b      	lsls	r3, r3, #28
 8002672:	4944      	ldr	r1, [pc, #272]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800267a:	4b42      	ldr	r3, [pc, #264]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800267c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002680:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	3b01      	subs	r3, #1
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	493d      	ldr	r1, [pc, #244]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d022      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026a8:	d11d      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	0e1b      	lsrs	r3, r3, #24
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026b8:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	0f1b      	lsrs	r3, r3, #28
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	019a      	lsls	r2, r3, #6
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	431a      	orrs	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	061b      	lsls	r3, r3, #24
 80026d8:	431a      	orrs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	071b      	lsls	r3, r3, #28
 80026de:	4929      	ldr	r1, [pc, #164]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d028      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	0e1b      	lsrs	r3, r3, #24
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	0c1b      	lsrs	r3, r3, #16
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	019a      	lsls	r2, r3, #6
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	431a      	orrs	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	071b      	lsls	r3, r3, #28
 8002726:	4917      	ldr	r1, [pc, #92]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	4911      	ldr	r1, [pc, #68]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7fd ffa0 	bl	8000694 <HAL_GetTick>
 8002754:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002758:	f7fd ff9c 	bl	8000694 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e007      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002776:	d1ef      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800

08002788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e040      	b.n	800281c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f003 fdc4 	bl	8006338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	; 0x24
 80027b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8be 	bl	8002948 <UART_SetConfig>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e022      	b.n	800281c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fb56 	bl	8002e90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002802:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fbdd 	bl	8002fd4 <UART_CheckIdleState>
 800281a:	4603      	mov	r3, r0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002838:	2b20      	cmp	r3, #32
 800283a:	d17f      	bne.n	800293c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_UART_Transmit+0x24>
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e078      	b.n	800293e <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_UART_Transmit+0x36>
 8002856:	2302      	movs	r3, #2
 8002858:	e071      	b.n	800293e <HAL_UART_Transmit+0x11a>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2221      	movs	r2, #33	; 0x21
 800286c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800286e:	f7fd ff11 	bl	8000694 <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	88fa      	ldrh	r2, [r7, #6]
 8002880:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288c:	d108      	bne.n	80028a0 <HAL_UART_Transmit+0x7c>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d104      	bne.n	80028a0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	e003      	b.n	80028a8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028a8:	e02c      	b.n	8002904 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	2180      	movs	r1, #128	; 0x80
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fbbc 	bl	8003032 <UART_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e03c      	b.n	800293e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10b      	bne.n	80028e2 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	3302      	adds	r3, #2
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	e007      	b.n	80028f2 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	3301      	adds	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1cc      	bne.n	80028aa <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2200      	movs	r2, #0
 8002918:	2140      	movs	r1, #64	; 0x40
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fb89 	bl	8003032 <UART_WaitOnFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e009      	b.n	800293e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002950:	2300      	movs	r3, #0
 8002952:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4bb1      	ldr	r3, [pc, #708]	; (8002c3c <UART_SetConfig+0x2f4>)
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	6939      	ldr	r1, [r7, #16]
 8002980:	430b      	orrs	r3, r1
 8002982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a9f      	ldr	r2, [pc, #636]	; (8002c40 <UART_SetConfig+0x2f8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d121      	bne.n	8002a0c <UART_SetConfig+0xc4>
 80029c8:	4b9e      	ldr	r3, [pc, #632]	; (8002c44 <UART_SetConfig+0x2fc>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d816      	bhi.n	8002a04 <UART_SetConfig+0xbc>
 80029d6:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <UART_SetConfig+0x94>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	080029f9 	.word	0x080029f9
 80029e4:	080029f3 	.word	0x080029f3
 80029e8:	080029ff 	.word	0x080029ff
 80029ec:	2301      	movs	r3, #1
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e151      	b.n	8002c96 <UART_SetConfig+0x34e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	77fb      	strb	r3, [r7, #31]
 80029f6:	e14e      	b.n	8002c96 <UART_SetConfig+0x34e>
 80029f8:	2304      	movs	r3, #4
 80029fa:	77fb      	strb	r3, [r7, #31]
 80029fc:	e14b      	b.n	8002c96 <UART_SetConfig+0x34e>
 80029fe:	2308      	movs	r3, #8
 8002a00:	77fb      	strb	r3, [r7, #31]
 8002a02:	e148      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002a04:	2310      	movs	r3, #16
 8002a06:	77fb      	strb	r3, [r7, #31]
 8002a08:	bf00      	nop
 8002a0a:	e144      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a8d      	ldr	r2, [pc, #564]	; (8002c48 <UART_SetConfig+0x300>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d134      	bne.n	8002a80 <UART_SetConfig+0x138>
 8002a16:	4b8b      	ldr	r3, [pc, #556]	; (8002c44 <UART_SetConfig+0x2fc>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	d829      	bhi.n	8002a78 <UART_SetConfig+0x130>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <UART_SetConfig+0xe4>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a61 	.word	0x08002a61
 8002a30:	08002a79 	.word	0x08002a79
 8002a34:	08002a79 	.word	0x08002a79
 8002a38:	08002a79 	.word	0x08002a79
 8002a3c:	08002a6d 	.word	0x08002a6d
 8002a40:	08002a79 	.word	0x08002a79
 8002a44:	08002a79 	.word	0x08002a79
 8002a48:	08002a79 	.word	0x08002a79
 8002a4c:	08002a67 	.word	0x08002a67
 8002a50:	08002a79 	.word	0x08002a79
 8002a54:	08002a79 	.word	0x08002a79
 8002a58:	08002a79 	.word	0x08002a79
 8002a5c:	08002a73 	.word	0x08002a73
 8002a60:	2300      	movs	r3, #0
 8002a62:	77fb      	strb	r3, [r7, #31]
 8002a64:	e117      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002a66:	2302      	movs	r3, #2
 8002a68:	77fb      	strb	r3, [r7, #31]
 8002a6a:	e114      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	e111      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002a72:	2308      	movs	r3, #8
 8002a74:	77fb      	strb	r3, [r7, #31]
 8002a76:	e10e      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002a78:	2310      	movs	r3, #16
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	bf00      	nop
 8002a7e:	e10a      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a71      	ldr	r2, [pc, #452]	; (8002c4c <UART_SetConfig+0x304>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d120      	bne.n	8002acc <UART_SetConfig+0x184>
 8002a8a:	4b6e      	ldr	r3, [pc, #440]	; (8002c44 <UART_SetConfig+0x2fc>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d00f      	beq.n	8002ab8 <UART_SetConfig+0x170>
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d802      	bhi.n	8002aa2 <UART_SetConfig+0x15a>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <UART_SetConfig+0x164>
 8002aa0:	e010      	b.n	8002ac4 <UART_SetConfig+0x17c>
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d005      	beq.n	8002ab2 <UART_SetConfig+0x16a>
 8002aa6:	2b30      	cmp	r3, #48	; 0x30
 8002aa8:	d009      	beq.n	8002abe <UART_SetConfig+0x176>
 8002aaa:	e00b      	b.n	8002ac4 <UART_SetConfig+0x17c>
 8002aac:	2300      	movs	r3, #0
 8002aae:	77fb      	strb	r3, [r7, #31]
 8002ab0:	e0f1      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	77fb      	strb	r3, [r7, #31]
 8002ab6:	e0ee      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002ab8:	2304      	movs	r3, #4
 8002aba:	77fb      	strb	r3, [r7, #31]
 8002abc:	e0eb      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002abe:	2308      	movs	r3, #8
 8002ac0:	77fb      	strb	r3, [r7, #31]
 8002ac2:	e0e8      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	77fb      	strb	r3, [r7, #31]
 8002ac8:	bf00      	nop
 8002aca:	e0e4      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a5f      	ldr	r2, [pc, #380]	; (8002c50 <UART_SetConfig+0x308>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d120      	bne.n	8002b18 <UART_SetConfig+0x1d0>
 8002ad6:	4b5b      	ldr	r3, [pc, #364]	; (8002c44 <UART_SetConfig+0x2fc>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ae0:	2b40      	cmp	r3, #64	; 0x40
 8002ae2:	d00f      	beq.n	8002b04 <UART_SetConfig+0x1bc>
 8002ae4:	2b40      	cmp	r3, #64	; 0x40
 8002ae6:	d802      	bhi.n	8002aee <UART_SetConfig+0x1a6>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <UART_SetConfig+0x1b0>
 8002aec:	e010      	b.n	8002b10 <UART_SetConfig+0x1c8>
 8002aee:	2b80      	cmp	r3, #128	; 0x80
 8002af0:	d005      	beq.n	8002afe <UART_SetConfig+0x1b6>
 8002af2:	2bc0      	cmp	r3, #192	; 0xc0
 8002af4:	d009      	beq.n	8002b0a <UART_SetConfig+0x1c2>
 8002af6:	e00b      	b.n	8002b10 <UART_SetConfig+0x1c8>
 8002af8:	2300      	movs	r3, #0
 8002afa:	77fb      	strb	r3, [r7, #31]
 8002afc:	e0cb      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002afe:	2302      	movs	r3, #2
 8002b00:	77fb      	strb	r3, [r7, #31]
 8002b02:	e0c8      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002b04:	2304      	movs	r3, #4
 8002b06:	77fb      	strb	r3, [r7, #31]
 8002b08:	e0c5      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	77fb      	strb	r3, [r7, #31]
 8002b0e:	e0c2      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002b10:	2310      	movs	r3, #16
 8002b12:	77fb      	strb	r3, [r7, #31]
 8002b14:	bf00      	nop
 8002b16:	e0be      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a4d      	ldr	r2, [pc, #308]	; (8002c54 <UART_SetConfig+0x30c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d124      	bne.n	8002b6c <UART_SetConfig+0x224>
 8002b22:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <UART_SetConfig+0x2fc>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b30:	d012      	beq.n	8002b58 <UART_SetConfig+0x210>
 8002b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b36:	d802      	bhi.n	8002b3e <UART_SetConfig+0x1f6>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <UART_SetConfig+0x204>
 8002b3c:	e012      	b.n	8002b64 <UART_SetConfig+0x21c>
 8002b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b42:	d006      	beq.n	8002b52 <UART_SetConfig+0x20a>
 8002b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b48:	d009      	beq.n	8002b5e <UART_SetConfig+0x216>
 8002b4a:	e00b      	b.n	8002b64 <UART_SetConfig+0x21c>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	77fb      	strb	r3, [r7, #31]
 8002b50:	e0a1      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	77fb      	strb	r3, [r7, #31]
 8002b56:	e09e      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	77fb      	strb	r3, [r7, #31]
 8002b5c:	e09b      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	77fb      	strb	r3, [r7, #31]
 8002b62:	e098      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002b64:	2310      	movs	r3, #16
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	bf00      	nop
 8002b6a:	e094      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a39      	ldr	r2, [pc, #228]	; (8002c58 <UART_SetConfig+0x310>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d124      	bne.n	8002bc0 <UART_SetConfig+0x278>
 8002b76:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <UART_SetConfig+0x2fc>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b84:	d012      	beq.n	8002bac <UART_SetConfig+0x264>
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8a:	d802      	bhi.n	8002b92 <UART_SetConfig+0x24a>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <UART_SetConfig+0x258>
 8002b90:	e012      	b.n	8002bb8 <UART_SetConfig+0x270>
 8002b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b96:	d006      	beq.n	8002ba6 <UART_SetConfig+0x25e>
 8002b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b9c:	d009      	beq.n	8002bb2 <UART_SetConfig+0x26a>
 8002b9e:	e00b      	b.n	8002bb8 <UART_SetConfig+0x270>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e077      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e074      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002bac:	2304      	movs	r3, #4
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e071      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e06e      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002bb8:	2310      	movs	r3, #16
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	bf00      	nop
 8002bbe:	e06a      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <UART_SetConfig+0x314>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d124      	bne.n	8002c14 <UART_SetConfig+0x2cc>
 8002bca:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <UART_SetConfig+0x2fc>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd8:	d012      	beq.n	8002c00 <UART_SetConfig+0x2b8>
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bde:	d802      	bhi.n	8002be6 <UART_SetConfig+0x29e>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <UART_SetConfig+0x2ac>
 8002be4:	e012      	b.n	8002c0c <UART_SetConfig+0x2c4>
 8002be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bea:	d006      	beq.n	8002bfa <UART_SetConfig+0x2b2>
 8002bec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bf0:	d009      	beq.n	8002c06 <UART_SetConfig+0x2be>
 8002bf2:	e00b      	b.n	8002c0c <UART_SetConfig+0x2c4>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e04d      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e04a      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002c00:	2304      	movs	r3, #4
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e047      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002c06:	2308      	movs	r3, #8
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e044      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	bf00      	nop
 8002c12:	e040      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a11      	ldr	r2, [pc, #68]	; (8002c60 <UART_SetConfig+0x318>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d139      	bne.n	8002c92 <UART_SetConfig+0x34a>
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <UART_SetConfig+0x2fc>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c2c:	d027      	beq.n	8002c7e <UART_SetConfig+0x336>
 8002c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c32:	d817      	bhi.n	8002c64 <UART_SetConfig+0x31c>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01c      	beq.n	8002c72 <UART_SetConfig+0x32a>
 8002c38:	e027      	b.n	8002c8a <UART_SetConfig+0x342>
 8002c3a:	bf00      	nop
 8002c3c:	efff69f3 	.word	0xefff69f3
 8002c40:	40011000 	.word	0x40011000
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40004400 	.word	0x40004400
 8002c4c:	40004800 	.word	0x40004800
 8002c50:	40004c00 	.word	0x40004c00
 8002c54:	40005000 	.word	0x40005000
 8002c58:	40011400 	.word	0x40011400
 8002c5c:	40007800 	.word	0x40007800
 8002c60:	40007c00 	.word	0x40007c00
 8002c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c68:	d006      	beq.n	8002c78 <UART_SetConfig+0x330>
 8002c6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c6e:	d009      	beq.n	8002c84 <UART_SetConfig+0x33c>
 8002c70:	e00b      	b.n	8002c8a <UART_SetConfig+0x342>
 8002c72:	2300      	movs	r3, #0
 8002c74:	77fb      	strb	r3, [r7, #31]
 8002c76:	e00e      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	e00b      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	77fb      	strb	r3, [r7, #31]
 8002c82:	e008      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002c84:	2308      	movs	r3, #8
 8002c86:	77fb      	strb	r3, [r7, #31]
 8002c88:	e005      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002c8a:	2310      	movs	r3, #16
 8002c8c:	77fb      	strb	r3, [r7, #31]
 8002c8e:	bf00      	nop
 8002c90:	e001      	b.n	8002c96 <UART_SetConfig+0x34e>
 8002c92:	2310      	movs	r3, #16
 8002c94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9e:	d17c      	bne.n	8002d9a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d859      	bhi.n	8002d5a <UART_SetConfig+0x412>
 8002ca6:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <UART_SetConfig+0x364>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002cd1 	.word	0x08002cd1
 8002cb0:	08002cef 	.word	0x08002cef
 8002cb4:	08002d0d 	.word	0x08002d0d
 8002cb8:	08002d5b 	.word	0x08002d5b
 8002cbc:	08002d25 	.word	0x08002d25
 8002cc0:	08002d5b 	.word	0x08002d5b
 8002cc4:	08002d5b 	.word	0x08002d5b
 8002cc8:	08002d5b 	.word	0x08002d5b
 8002ccc:	08002d43 	.word	0x08002d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002cd0:	f7ff f90c 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	005a      	lsls	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	441a      	add	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	61bb      	str	r3, [r7, #24]
        break;
 8002cec:	e038      	b.n	8002d60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002cee:	f7ff f911 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	005a      	lsls	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	441a      	add	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	61bb      	str	r3, [r7, #24]
        break;
 8002d0a:	e029      	b.n	8002d60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	085a      	lsrs	r2, r3, #1
 8002d12:	4b5d      	ldr	r3, [pc, #372]	; (8002e88 <UART_SetConfig+0x540>)
 8002d14:	4413      	add	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6852      	ldr	r2, [r2, #4]
 8002d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	61bb      	str	r3, [r7, #24]
        break;
 8002d22:	e01d      	b.n	8002d60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d24:	f7fe fffe 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	005a      	lsls	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	441a      	add	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	61bb      	str	r3, [r7, #24]
        break;
 8002d40:	e00e      	b.n	8002d60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	085b      	lsrs	r3, r3, #1
 8002d48:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	61bb      	str	r3, [r7, #24]
        break;
 8002d58:	e002      	b.n	8002d60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
        break;
 8002d5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	d916      	bls.n	8002d94 <UART_SetConfig+0x44c>
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d212      	bcs.n	8002d94 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f023 030f 	bic.w	r3, r3, #15
 8002d76:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	89fb      	ldrh	r3, [r7, #14]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	89fa      	ldrh	r2, [r7, #14]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	e06e      	b.n	8002e72 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
 8002d98:	e06b      	b.n	8002e72 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8002d9a:	7ffb      	ldrb	r3, [r7, #31]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d857      	bhi.n	8002e50 <UART_SetConfig+0x508>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <UART_SetConfig+0x460>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002dcd 	.word	0x08002dcd
 8002dac:	08002de9 	.word	0x08002de9
 8002db0:	08002e05 	.word	0x08002e05
 8002db4:	08002e51 	.word	0x08002e51
 8002db8:	08002e1d 	.word	0x08002e1d
 8002dbc:	08002e51 	.word	0x08002e51
 8002dc0:	08002e51 	.word	0x08002e51
 8002dc4:	08002e51 	.word	0x08002e51
 8002dc8:	08002e39 	.word	0x08002e39
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002dcc:	f7ff f88e 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	085b      	lsrs	r3, r3, #1
 8002dd8:	441a      	add	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	61bb      	str	r3, [r7, #24]
        break;
 8002de6:	e036      	b.n	8002e56 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002de8:	f7ff f894 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	441a      	add	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	61bb      	str	r3, [r7, #24]
        break;
 8002e02:	e028      	b.n	8002e56 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	085a      	lsrs	r2, r3, #1
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <UART_SetConfig+0x544>)
 8002e0c:	4413      	add	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6852      	ldr	r2, [r2, #4]
 8002e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	61bb      	str	r3, [r7, #24]
        break;
 8002e1a:	e01c      	b.n	8002e56 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e1c:	f7fe ff82 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	61bb      	str	r3, [r7, #24]
        break;
 8002e36:	e00e      	b.n	8002e56 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	61bb      	str	r3, [r7, #24]
        break;
 8002e4e:	e002      	b.n	8002e56 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	75fb      	strb	r3, [r7, #23]
        break;
 8002e54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b0f      	cmp	r3, #15
 8002e5a:	d908      	bls.n	8002e6e <UART_SetConfig+0x526>
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e62:	d204      	bcs.n	8002e6e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	e001      	b.n	8002e72 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	01e84800 	.word	0x01e84800
 8002e8c:	00f42400 	.word	0x00f42400

08002e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01a      	beq.n	8002fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f8e:	d10a      	bne.n	8002fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	605a      	str	r2, [r3, #4]
  }
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002fe2:	f7fd fb57 	bl	8000694 <HAL_GetTick>
 8002fe6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d10e      	bne.n	8003014 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f814 	bl	8003032 <UART_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e00a      	b.n	800302a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	4613      	mov	r3, r2
 8003040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003042:	e02a      	b.n	800309a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800304a:	d026      	beq.n	800309a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304c:	f7fd fb22 	bl	8000694 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	429a      	cmp	r2, r3
 800305a:	d302      	bcc.n	8003062 <UART_WaitOnFlagUntilTimeout+0x30>
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11b      	bne.n	800309a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003070:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e00f      	b.n	80030ba <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69da      	ldr	r2, [r3, #28]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d0c5      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030ca:	f3ef 8305 	mrs	r3, IPSR
 80030ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80030d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d6:	f3ef 8310 	mrs	r3, PRIMASK
 80030da:	607b      	str	r3, [r7, #4]
  return(result);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <osKernelInitialize+0x32>
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <osKernelInitialize+0x64>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d109      	bne.n	80030fe <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030ea:	f3ef 8311 	mrs	r3, BASEPRI
 80030ee:	603b      	str	r3, [r7, #0]
  return(result);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80030f6:	f06f 0305 	mvn.w	r3, #5
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e00c      	b.n	8003118 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <osKernelInitialize+0x64>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d105      	bne.n	8003112 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <osKernelInitialize+0x64>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e002      	b.n	8003118 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003116:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003118:	68fb      	ldr	r3, [r7, #12]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	2000009c 	.word	0x2000009c

0800312c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003132:	f3ef 8305 	mrs	r3, IPSR
 8003136:	60bb      	str	r3, [r7, #8]
  return(result);
 8003138:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313e:	f3ef 8310 	mrs	r3, PRIMASK
 8003142:	607b      	str	r3, [r7, #4]
  return(result);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <osKernelStart+0x32>
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <osKernelStart+0x64>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d109      	bne.n	8003166 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003152:	f3ef 8311 	mrs	r3, BASEPRI
 8003156:	603b      	str	r3, [r7, #0]
  return(result);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <osKernelStart+0x3a>
    stat = osErrorISR;
 800315e:	f06f 0305 	mvn.w	r3, #5
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e00e      	b.n	8003184 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <osKernelStart+0x64>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <osKernelStart+0x64>)
 8003170:	2202      	movs	r2, #2
 8003172:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003174:	f001 f8e8 	bl	8004348 <vTaskStartScheduler>
      stat = osOK;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e002      	b.n	8003184 <osKernelStart+0x58>
    } else {
      stat = osError;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003182:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003184:	68fb      	ldr	r3, [r7, #12]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	2000009c 	.word	0x2000009c

08003194 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b092      	sub	sp, #72	; 0x48
 8003198:	af04      	add	r7, sp, #16
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031a4:	f3ef 8305 	mrs	r3, IPSR
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f040 8094 	bne.w	80032da <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b2:	f3ef 8310 	mrs	r3, PRIMASK
 80031b6:	623b      	str	r3, [r7, #32]
  return(result);
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 808d 	bne.w	80032da <osThreadNew+0x146>
 80031c0:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <osThreadNew+0x150>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d106      	bne.n	80031d6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031c8:	f3ef 8311 	mrs	r3, BASEPRI
 80031cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f040 8082 	bne.w	80032da <osThreadNew+0x146>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d07e      	beq.n	80032da <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80031e0:	2318      	movs	r3, #24
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80031e4:	2300      	movs	r3, #0
 80031e6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80031e8:	f107 031b 	add.w	r3, r7, #27
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d045      	beq.n	8003286 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <osThreadNew+0x74>
        name = attr->name;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <osThreadNew+0x9a>
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321e:	2b38      	cmp	r3, #56	; 0x38
 8003220:	d805      	bhi.n	800322e <osThreadNew+0x9a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <osThreadNew+0x9e>
        return (NULL);
 800322e:	2300      	movs	r3, #0
 8003230:	e054      	b.n	80032dc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00e      	beq.n	8003268 <osThreadNew+0xd4>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b5b      	cmp	r3, #91	; 0x5b
 8003250:	d90a      	bls.n	8003268 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <osThreadNew+0xd4>
        mem = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
 8003266:	e010      	b.n	800328a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10c      	bne.n	800328a <osThreadNew+0xf6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d108      	bne.n	800328a <osThreadNew+0xf6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <osThreadNew+0xf6>
          mem = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
 8003284:	e001      	b.n	800328a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	2b01      	cmp	r3, #1
 800328e:	d110      	bne.n	80032b2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003298:	9202      	str	r2, [sp, #8]
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fdfc 	bl	8003ea4 <xTaskCreateStatic>
 80032ac:	4603      	mov	r3, r0
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e013      	b.n	80032da <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d110      	bne.n	80032da <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fe49 	bl	8003f62 <xTaskCreate>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <osThreadNew+0x146>
          hTask = NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032da:	697b      	ldr	r3, [r7, #20]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3738      	adds	r7, #56	; 0x38
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	2000009c 	.word	0x2000009c

080032e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a07      	ldr	r2, [pc, #28]	; (8003314 <vApplicationGetIdleTaskMemory+0x2c>)
 80032f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4a06      	ldr	r2, [pc, #24]	; (8003318 <vApplicationGetIdleTaskMemory+0x30>)
 80032fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	601a      	str	r2, [r3, #0]
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	200000a0 	.word	0x200000a0
 8003318:	200000fc 	.word	0x200000fc

0800331c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a07      	ldr	r2, [pc, #28]	; (8003348 <vApplicationGetTimerTaskMemory+0x2c>)
 800332c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4a06      	ldr	r2, [pc, #24]	; (800334c <vApplicationGetTimerTaskMemory+0x30>)
 8003332:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800333a:	601a      	str	r2, [r3, #0]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	200002fc 	.word	0x200002fc
 800334c:	20000358 	.word	0x20000358

08003350 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f103 0208 	add.w	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003368:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f103 0208 	add.w	r2, r3, #8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f103 0208 	add.w	r2, r3, #8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	601a      	str	r2, [r3, #0]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003408:	d103      	bne.n	8003412 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e00c      	b.n	800342c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3308      	adds	r3, #8
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e002      	b.n	8003420 <vListInsert+0x2e>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	d2f6      	bcs.n	800341a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	601a      	str	r2, [r3, #0]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6892      	ldr	r2, [r2, #8]
 800347a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6852      	ldr	r2, [r2, #4]
 8003484:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d103      	bne.n	8003498 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1e5a      	subs	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	b672      	cpsid	i
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	b662      	cpsie	i
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	e7fe      	b.n	80034e2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80034e4:	f002 f888 	bl	80055f8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	68f9      	ldr	r1, [r7, #12]
 80034f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	441a      	add	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	3b01      	subs	r3, #1
 8003516:	68f9      	ldr	r1, [r7, #12]
 8003518:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	441a      	add	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	22ff      	movs	r2, #255	; 0xff
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	22ff      	movs	r2, #255	; 0xff
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d114      	bne.n	8003564 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01a      	beq.n	8003578 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3310      	adds	r3, #16
 8003546:	4618      	mov	r0, r3
 8003548:	f001 f992 	bl	8004870 <xTaskRemoveFromEventList>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <xQueueGenericReset+0xd0>)
 8003554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	e009      	b.n	8003578 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3310      	adds	r3, #16
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fef1 	bl	8003350 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3324      	adds	r3, #36	; 0x24
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff feec 	bl	8003350 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003578:	f002 f870 	bl	800565c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800357c:	2301      	movs	r3, #1
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	e000ed04 	.word	0xe000ed04

0800358c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08e      	sub	sp, #56	; 0x38
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10b      	bne.n	80035b8 <xQueueGenericCreateStatic+0x2c>
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	b672      	cpsid	i
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	b662      	cpsie	i
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b6:	e7fe      	b.n	80035b6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10b      	bne.n	80035d6 <xQueueGenericCreateStatic+0x4a>
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	b672      	cpsid	i
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	b662      	cpsie	i
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
 80035d4:	e7fe      	b.n	80035d4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <xQueueGenericCreateStatic+0x56>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <xQueueGenericCreateStatic+0x5a>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <xQueueGenericCreateStatic+0x5c>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <xQueueGenericCreateStatic+0x78>
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	b672      	cpsid	i
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	b662      	cpsie	i
 8003600:	623b      	str	r3, [r7, #32]
 8003602:	e7fe      	b.n	8003602 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <xQueueGenericCreateStatic+0x84>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <xQueueGenericCreateStatic+0x88>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <xQueueGenericCreateStatic+0x8a>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <xQueueGenericCreateStatic+0xa6>
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	b672      	cpsid	i
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	b662      	cpsie	i
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	e7fe      	b.n	8003630 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003632:	2350      	movs	r3, #80	; 0x50
 8003634:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b50      	cmp	r3, #80	; 0x50
 800363a:	d00b      	beq.n	8003654 <xQueueGenericCreateStatic+0xc8>
 800363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003640:	b672      	cpsid	i
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	b662      	cpsie	i
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	e7fe      	b.n	8003652 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00d      	beq.n	800367a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003666:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	4613      	mov	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f805 	bl	8003684 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800367c:	4618      	mov	r0, r3
 800367e:	3730      	adds	r7, #48	; 0x30
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	e002      	b.n	80036a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036b2:	2101      	movs	r1, #1
 80036b4:	69b8      	ldr	r0, [r7, #24]
 80036b6:	f7ff feff 	bl	80034b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08e      	sub	sp, #56	; 0x38
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036da:	2300      	movs	r3, #0
 80036dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10b      	bne.n	8003700 <xQueueGenericSend+0x34>
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	b672      	cpsid	i
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	b662      	cpsie	i
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fe:	e7fe      	b.n	80036fe <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d103      	bne.n	800370e <xQueueGenericSend+0x42>
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <xQueueGenericSend+0x46>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <xQueueGenericSend+0x48>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <xQueueGenericSend+0x64>
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	b672      	cpsid	i
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	b662      	cpsie	i
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	e7fe      	b.n	800372e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d103      	bne.n	800373e <xQueueGenericSend+0x72>
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <xQueueGenericSend+0x76>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <xQueueGenericSend+0x78>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <xQueueGenericSend+0x94>
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	b672      	cpsid	i
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	b662      	cpsie	i
 800375c:	623b      	str	r3, [r7, #32]
 800375e:	e7fe      	b.n	800375e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003760:	f001 fa4a 	bl	8004bf8 <xTaskGetSchedulerState>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d102      	bne.n	8003770 <xQueueGenericSend+0xa4>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <xQueueGenericSend+0xa8>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <xQueueGenericSend+0xaa>
 8003774:	2300      	movs	r3, #0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <xQueueGenericSend+0xc6>
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	b672      	cpsid	i
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	b662      	cpsie	i
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	e7fe      	b.n	8003790 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003792:	f001 ff31 	bl	80055f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <xQueueGenericSend+0xdc>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d129      	bne.n	80037fc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ae:	f000 fa0d 	bl	8003bcc <prvCopyDataToQueue>
 80037b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d010      	beq.n	80037de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	3324      	adds	r3, #36	; 0x24
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 f855 	bl	8004870 <xTaskRemoveFromEventList>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037cc:	4b3f      	ldr	r3, [pc, #252]	; (80038cc <xQueueGenericSend+0x200>)
 80037ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	e00a      	b.n	80037f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037e4:	4b39      	ldr	r3, [pc, #228]	; (80038cc <xQueueGenericSend+0x200>)
 80037e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037f4:	f001 ff32 	bl	800565c <vPortExitCritical>
				return pdPASS;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e063      	b.n	80038c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003802:	f001 ff2b 	bl	800565c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003806:	2300      	movs	r3, #0
 8003808:	e05c      	b.n	80038c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	4618      	mov	r0, r3
 8003816:	f001 f88f 	bl	8004938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800381a:	2301      	movs	r3, #1
 800381c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800381e:	f001 ff1d 	bl	800565c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003822:	f000 fdf9 	bl	8004418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003826:	f001 fee7 	bl	80055f8 <vPortEnterCritical>
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003830:	b25b      	sxtb	r3, r3
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003836:	d103      	bne.n	8003840 <xQueueGenericSend+0x174>
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003846:	b25b      	sxtb	r3, r3
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800384c:	d103      	bne.n	8003856 <xQueueGenericSend+0x18a>
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003856:	f001 ff01 	bl	800565c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800385a:	1d3a      	adds	r2, r7, #4
 800385c:	f107 0314 	add.w	r3, r7, #20
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f001 f87e 	bl	8004964 <xTaskCheckForTimeOut>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d124      	bne.n	80038b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800386e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003870:	f000 faa4 	bl	8003dbc <prvIsQueueFull>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d018      	beq.n	80038ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	3310      	adds	r3, #16
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f000 ffa2 	bl	80047cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388a:	f000 fa2f 	bl	8003cec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800388e:	f000 fdd1 	bl	8004434 <xTaskResumeAll>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	f47f af7c 	bne.w	8003792 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <xQueueGenericSend+0x200>)
 800389c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	e772      	b.n	8003792 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ae:	f000 fa1d 	bl	8003cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038b2:	f000 fdbf 	bl	8004434 <xTaskResumeAll>
 80038b6:	e76c      	b.n	8003792 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ba:	f000 fa17 	bl	8003cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038be:	f000 fdb9 	bl	8004434 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038c2:	2300      	movs	r3, #0
		}
	}
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3738      	adds	r7, #56	; 0x38
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	e000ed04 	.word	0xe000ed04

080038d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08e      	sub	sp, #56	; 0x38
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10b      	bne.n	8003900 <xQueueGenericSendFromISR+0x30>
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	b672      	cpsid	i
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	b662      	cpsie	i
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
 80038fe:	e7fe      	b.n	80038fe <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <xQueueGenericSendFromISR+0x3e>
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <xQueueGenericSendFromISR+0x42>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <xQueueGenericSendFromISR+0x44>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <xQueueGenericSendFromISR+0x60>
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	b672      	cpsid	i
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	b662      	cpsie	i
 800392c:	623b      	str	r3, [r7, #32]
 800392e:	e7fe      	b.n	800392e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d103      	bne.n	800393e <xQueueGenericSendFromISR+0x6e>
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <xQueueGenericSendFromISR+0x72>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <xQueueGenericSendFromISR+0x74>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <xQueueGenericSendFromISR+0x90>
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	b672      	cpsid	i
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	b662      	cpsie	i
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	e7fe      	b.n	800395e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003960:	f001 ff2a 	bl	80057b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003964:	f3ef 8211 	mrs	r2, BASEPRI
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	b672      	cpsid	i
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	b662      	cpsie	i
 800397c:	61ba      	str	r2, [r7, #24]
 800397e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003980:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	429a      	cmp	r2, r3
 800398e:	d302      	bcc.n	8003996 <xQueueGenericSendFromISR+0xc6>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d12c      	bne.n	80039f0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800399c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039a6:	f000 f911 	bl	8003bcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039b2:	d112      	bne.n	80039da <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d016      	beq.n	80039ea <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	3324      	adds	r3, #36	; 0x24
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 ff55 	bl	8004870 <xTaskRemoveFromEventList>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00e      	beq.n	80039ea <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e007      	b.n	80039ea <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039de:	3301      	adds	r3, #1
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	b25a      	sxtb	r2, r3
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039ea:	2301      	movs	r3, #1
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80039ee:	e001      	b.n	80039f4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	637b      	str	r3, [r7, #52]	; 0x34
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3738      	adds	r7, #56	; 0x38
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08c      	sub	sp, #48	; 0x30
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <xQueueReceive+0x32>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	b672      	cpsid	i
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	b662      	cpsie	i
 8003a36:	623b      	str	r3, [r7, #32]
 8003a38:	e7fe      	b.n	8003a38 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <xQueueReceive+0x40>
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <xQueueReceive+0x44>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <xQueueReceive+0x46>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <xQueueReceive+0x62>
 8003a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a56:	b672      	cpsid	i
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	b662      	cpsie	i
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	e7fe      	b.n	8003a68 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a6a:	f001 f8c5 	bl	8004bf8 <xTaskGetSchedulerState>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <xQueueReceive+0x72>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <xQueueReceive+0x76>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <xQueueReceive+0x78>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <xQueueReceive+0x94>
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	b672      	cpsid	i
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	b662      	cpsie	i
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e7fe      	b.n	8003a9a <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a9c:	f001 fdac 	bl	80055f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01f      	beq.n	8003aec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ab0:	f000 f8f6 	bl	8003ca0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	1e5a      	subs	r2, r3, #1
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00f      	beq.n	8003ae4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	3310      	adds	r3, #16
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fed1 	bl	8004870 <xTaskRemoveFromEventList>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ad4:	4b3c      	ldr	r3, [pc, #240]	; (8003bc8 <xQueueReceive+0x1c0>)
 8003ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ae4:	f001 fdba 	bl	800565c <vPortExitCritical>
				return pdPASS;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e069      	b.n	8003bc0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003af2:	f001 fdb3 	bl	800565c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e062      	b.n	8003bc0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b00:	f107 0310 	add.w	r3, r7, #16
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 ff17 	bl	8004938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b0e:	f001 fda5 	bl	800565c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b12:	f000 fc81 	bl	8004418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b16:	f001 fd6f 	bl	80055f8 <vPortEnterCritical>
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b26:	d103      	bne.n	8003b30 <xQueueReceive+0x128>
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b36:	b25b      	sxtb	r3, r3
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b3c:	d103      	bne.n	8003b46 <xQueueReceive+0x13e>
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b46:	f001 fd89 	bl	800565c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b4a:	1d3a      	adds	r2, r7, #4
 8003b4c:	f107 0310 	add.w	r3, r7, #16
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 ff06 	bl	8004964 <xTaskCheckForTimeOut>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d123      	bne.n	8003ba6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b60:	f000 f916 	bl	8003d90 <prvIsQueueEmpty>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d017      	beq.n	8003b9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	3324      	adds	r3, #36	; 0x24
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fe2a 	bl	80047cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b7a:	f000 f8b7 	bl	8003cec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b7e:	f000 fc59 	bl	8004434 <xTaskResumeAll>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d189      	bne.n	8003a9c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <xQueueReceive+0x1c0>)
 8003b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	e780      	b.n	8003a9c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9c:	f000 f8a6 	bl	8003cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ba0:	f000 fc48 	bl	8004434 <xTaskResumeAll>
 8003ba4:	e77a      	b.n	8003a9c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ba8:	f000 f8a0 	bl	8003cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bac:	f000 fc42 	bl	8004434 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb2:	f000 f8ed 	bl	8003d90 <prvIsQueueEmpty>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f43f af6f 	beq.w	8003a9c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3730      	adds	r7, #48	; 0x30
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10d      	bne.n	8003c06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d14d      	bne.n	8003c8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 f81c 	bl	8004c34 <xTaskPriorityDisinherit>
 8003bfc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	e043      	b.n	8003c8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d119      	bne.n	8003c40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6898      	ldr	r0, [r3, #8]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	461a      	mov	r2, r3
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	f002 fd14 	bl	8006644 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	441a      	add	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d32b      	bcc.n	8003c8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	609a      	str	r2, [r3, #8]
 8003c3e:	e026      	b.n	8003c8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68d8      	ldr	r0, [r3, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	f002 fcfa 	bl	8006644 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	425b      	negs	r3, r3
 8003c5a:	441a      	add	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d207      	bcs.n	8003c7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	425b      	negs	r3, r3
 8003c76:	441a      	add	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d105      	bne.n	8003c8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c96:	697b      	ldr	r3, [r7, #20]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d018      	beq.n	8003ce4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	441a      	add	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d303      	bcc.n	8003cd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68d9      	ldr	r1, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6838      	ldr	r0, [r7, #0]
 8003ce0:	f002 fcb0 	bl	8006644 <memcpy>
	}
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cf4:	f001 fc80 	bl	80055f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d00:	e011      	b.n	8003d26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d012      	beq.n	8003d30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3324      	adds	r3, #36	; 0x24
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fdae 	bl	8004870 <xTaskRemoveFromEventList>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d1a:	f000 fe87 	bl	8004a2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	dce9      	bgt.n	8003d02 <prvUnlockQueue+0x16>
 8003d2e:	e000      	b.n	8003d32 <prvUnlockQueue+0x46>
					break;
 8003d30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	22ff      	movs	r2, #255	; 0xff
 8003d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d3a:	f001 fc8f 	bl	800565c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d3e:	f001 fc5b 	bl	80055f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d4a:	e011      	b.n	8003d70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d012      	beq.n	8003d7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3310      	adds	r3, #16
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fd89 	bl	8004870 <xTaskRemoveFromEventList>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d64:	f000 fe62 	bl	8004a2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d68:	7bbb      	ldrb	r3, [r7, #14]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	dce9      	bgt.n	8003d4c <prvUnlockQueue+0x60>
 8003d78:	e000      	b.n	8003d7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	22ff      	movs	r2, #255	; 0xff
 8003d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d84:	f001 fc6a 	bl	800565c <vPortExitCritical>
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d98:	f001 fc2e 	bl	80055f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e001      	b.n	8003dae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dae:	f001 fc55 	bl	800565c <vPortExitCritical>

	return xReturn;
 8003db2:	68fb      	ldr	r3, [r7, #12]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dc4:	f001 fc18 	bl	80055f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d102      	bne.n	8003dda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e001      	b.n	8003dde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dde:	f001 fc3d 	bl	800565c <vPortExitCritical>

	return xReturn;
 8003de2:	68fb      	ldr	r3, [r7, #12]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e014      	b.n	8003e26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003dfc:	4a0e      	ldr	r2, [pc, #56]	; (8003e38 <vQueueAddToRegistry+0x4c>)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e08:	490b      	ldr	r1, [pc, #44]	; (8003e38 <vQueueAddToRegistry+0x4c>)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e12:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <vQueueAddToRegistry+0x4c>)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e1e:	e005      	b.n	8003e2c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3301      	adds	r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b07      	cmp	r3, #7
 8003e2a:	d9e7      	bls.n	8003dfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	20004ab4 	.word	0x20004ab4

08003e3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e4c:	f001 fbd4 	bl	80055f8 <vPortEnterCritical>
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e56:	b25b      	sxtb	r3, r3
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e5c:	d103      	bne.n	8003e66 <vQueueWaitForMessageRestricted+0x2a>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e6c:	b25b      	sxtb	r3, r3
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e72:	d103      	bne.n	8003e7c <vQueueWaitForMessageRestricted+0x40>
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e7c:	f001 fbee 	bl	800565c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3324      	adds	r3, #36	; 0x24
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fcc1 	bl	8004818 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e96:	6978      	ldr	r0, [r7, #20]
 8003e98:	f7ff ff28 	bl	8003cec <prvUnlockQueue>
	}
 8003e9c:	bf00      	nop
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08e      	sub	sp, #56	; 0x38
 8003ea8:	af04      	add	r7, sp, #16
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <xTaskCreateStatic+0x2c>
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	b672      	cpsid	i
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	b662      	cpsie	i
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	e7fe      	b.n	8003ece <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10b      	bne.n	8003eee <xTaskCreateStatic+0x4a>
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	b672      	cpsid	i
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	b662      	cpsie	i
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e7fe      	b.n	8003eec <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003eee:	235c      	movs	r3, #92	; 0x5c
 8003ef0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b5c      	cmp	r3, #92	; 0x5c
 8003ef6:	d00b      	beq.n	8003f10 <xTaskCreateStatic+0x6c>
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	b672      	cpsid	i
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	b662      	cpsie	i
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	e7fe      	b.n	8003f0e <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01e      	beq.n	8003f54 <xTaskCreateStatic+0xb0>
 8003f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	2202      	movs	r2, #2
 8003f2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9303      	str	r3, [sp, #12]
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	9302      	str	r3, [sp, #8]
 8003f36:	f107 0314 	add.w	r3, r7, #20
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f850 	bl	8003fec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f4e:	f000 f8d5 	bl	80040fc <prvAddNewTaskToReadyList>
 8003f52:	e001      	b.n	8003f58 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f58:	697b      	ldr	r3, [r7, #20]
	}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3728      	adds	r7, #40	; 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b08c      	sub	sp, #48	; 0x30
 8003f66:	af04      	add	r7, sp, #16
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fc60 	bl	800583c <pvPortMalloc>
 8003f7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003f84:	205c      	movs	r0, #92	; 0x5c
 8003f86:	f001 fc59 	bl	800583c <pvPortMalloc>
 8003f8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
 8003f98:	e005      	b.n	8003fa6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f9a:	6978      	ldr	r0, [r7, #20]
 8003f9c:	f001 fd16 	bl	80059cc <vPortFree>
 8003fa0:	e001      	b.n	8003fa6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d017      	beq.n	8003fdc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9303      	str	r3, [sp, #12]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	9302      	str	r3, [sp, #8]
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f80e 	bl	8003fec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fd0:	69f8      	ldr	r0, [r7, #28]
 8003fd2:	f000 f893 	bl	80040fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	e002      	b.n	8003fe2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fe0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
	}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	461a      	mov	r2, r3
 8004004:	21a5      	movs	r1, #165	; 0xa5
 8004006:	f002 fb28 	bl	800665a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004014:	440b      	add	r3, r1
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f023 0307 	bic.w	r3, r3, #7
 8004022:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <prvInitialiseNewTask+0x5a>
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	b672      	cpsid	i
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	b662      	cpsie	i
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e7fe      	b.n	8004044 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	e012      	b.n	8004072 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	7819      	ldrb	r1, [r3, #0]
 8004054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	3334      	adds	r3, #52	; 0x34
 800405c:	460a      	mov	r2, r1
 800405e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3301      	adds	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	2b0f      	cmp	r3, #15
 8004076:	d9e9      	bls.n	800404c <prvInitialiseNewTask+0x60>
 8004078:	e000      	b.n	800407c <prvInitialiseNewTask+0x90>
		{
			break;
 800407a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	2b37      	cmp	r3, #55	; 0x37
 8004088:	d901      	bls.n	800408e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800408a:	2337      	movs	r3, #55	; 0x37
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004098:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	2200      	movs	r2, #0
 800409e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff f973 	bl	8003390 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	3318      	adds	r3, #24
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff f96e 	bl	8003390 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	2200      	movs	r2, #0
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	69b8      	ldr	r0, [r7, #24]
 80040de:	f001 f985 	bl	80053ec <pxPortInitialiseStack>
 80040e2:	4602      	mov	r2, r0
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040f4:	bf00      	nop
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004104:	f001 fa78 	bl	80055f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004108:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <prvAddNewTaskToReadyList+0xc4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	4a2c      	ldr	r2, [pc, #176]	; (80041c0 <prvAddNewTaskToReadyList+0xc4>)
 8004110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004112:	4b2c      	ldr	r3, [pc, #176]	; (80041c4 <prvAddNewTaskToReadyList+0xc8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800411a:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <prvAddNewTaskToReadyList+0xc8>)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004120:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <prvAddNewTaskToReadyList+0xc4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d110      	bne.n	800414a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004128:	f000 fca4 	bl	8004a74 <prvInitialiseTaskLists>
 800412c:	e00d      	b.n	800414a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800412e:	4b26      	ldr	r3, [pc, #152]	; (80041c8 <prvAddNewTaskToReadyList+0xcc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004136:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <prvAddNewTaskToReadyList+0xc8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	429a      	cmp	r2, r3
 8004142:	d802      	bhi.n	800414a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004144:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <prvAddNewTaskToReadyList+0xc8>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <prvAddNewTaskToReadyList+0xd0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3301      	adds	r3, #1
 8004150:	4a1e      	ldr	r2, [pc, #120]	; (80041cc <prvAddNewTaskToReadyList+0xd0>)
 8004152:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <prvAddNewTaskToReadyList+0xd0>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <prvAddNewTaskToReadyList+0xd4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d903      	bls.n	8004170 <prvAddNewTaskToReadyList+0x74>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <prvAddNewTaskToReadyList+0xd4>)
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <prvAddNewTaskToReadyList+0xd8>)
 800417e:	441a      	add	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f7ff f90f 	bl	80033aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800418c:	f001 fa66 	bl	800565c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004190:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <prvAddNewTaskToReadyList+0xcc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00e      	beq.n	80041b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <prvAddNewTaskToReadyList+0xc8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d207      	bcs.n	80041b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <prvAddNewTaskToReadyList+0xdc>)
 80041a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000c2c 	.word	0x20000c2c
 80041c4:	20000758 	.word	0x20000758
 80041c8:	20000c38 	.word	0x20000c38
 80041cc:	20000c48 	.word	0x20000c48
 80041d0:	20000c34 	.word	0x20000c34
 80041d4:	2000075c 	.word	0x2000075c
 80041d8:	e000ed04 	.word	0xe000ed04

080041dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	; 0x28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <vTaskDelayUntil+0x2c>
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	b672      	cpsid	i
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	b662      	cpsie	i
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	e7fe      	b.n	8004206 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <vTaskDelayUntil+0x4a>
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	b672      	cpsid	i
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	b662      	cpsie	i
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	e7fe      	b.n	8004224 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8004226:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <vTaskDelayUntil+0xf4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <vTaskDelayUntil+0x6a>
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	b672      	cpsid	i
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	b662      	cpsie	i
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e7fe      	b.n	8004244 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8004246:	f000 f8e7 	bl	8004418 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800424a:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <vTaskDelayUntil+0xf8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	4413      	add	r3, r2
 8004258:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6a3a      	ldr	r2, [r7, #32]
 8004260:	429a      	cmp	r2, r3
 8004262:	d20b      	bcs.n	800427c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	429a      	cmp	r2, r3
 800426c:	d211      	bcs.n	8004292 <vTaskDelayUntil+0xb6>
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	429a      	cmp	r2, r3
 8004274:	d90d      	bls.n	8004292 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
 800427a:	e00a      	b.n	8004292 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	429a      	cmp	r2, r3
 8004284:	d303      	bcc.n	800428e <vTaskDelayUntil+0xb2>
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	429a      	cmp	r2, r3
 800428c:	d901      	bls.n	8004292 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800428e:	2301      	movs	r3, #1
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d006      	beq.n	80042ac <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fd34 	bl	8004d14 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80042ac:	f000 f8c2 	bl	8004434 <xTaskResumeAll>
 80042b0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <vTaskDelayUntil+0xfc>)
 80042ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042c8:	bf00      	nop
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000c54 	.word	0x20000c54
 80042d4:	20000c30 	.word	0x20000c30
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <vTaskDelay+0x64>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <vTaskDelay+0x32>
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	b672      	cpsid	i
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	b662      	cpsie	i
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	e7fe      	b.n	800430c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800430e:	f000 f883 	bl	8004418 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004312:	2100      	movs	r1, #0
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fcfd 	bl	8004d14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800431a:	f000 f88b 	bl	8004434 <xTaskResumeAll>
 800431e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d107      	bne.n	8004336 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <vTaskDelay+0x68>)
 8004328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000c54 	.word	0x20000c54
 8004344:	e000ed04 	.word	0xe000ed04

08004348 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004356:	463a      	mov	r2, r7
 8004358:	1d39      	adds	r1, r7, #4
 800435a:	f107 0308 	add.w	r3, r7, #8
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe ffc2 	bl	80032e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	9202      	str	r2, [sp, #8]
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	2300      	movs	r3, #0
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	2300      	movs	r3, #0
 8004374:	460a      	mov	r2, r1
 8004376:	4922      	ldr	r1, [pc, #136]	; (8004400 <vTaskStartScheduler+0xb8>)
 8004378:	4822      	ldr	r0, [pc, #136]	; (8004404 <vTaskStartScheduler+0xbc>)
 800437a:	f7ff fd93 	bl	8003ea4 <xTaskCreateStatic>
 800437e:	4602      	mov	r2, r0
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <vTaskStartScheduler+0xc0>)
 8004382:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004384:	4b20      	ldr	r3, [pc, #128]	; (8004408 <vTaskStartScheduler+0xc0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800438c:	2301      	movs	r3, #1
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e001      	b.n	8004396 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d102      	bne.n	80043a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800439c:	f000 fd0e 	bl	8004dbc <xTimerCreateTimerTask>
 80043a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d117      	bne.n	80043d8 <vTaskStartScheduler+0x90>
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	b672      	cpsid	i
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	b662      	cpsie	i
 80043bc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043be:	4b13      	ldr	r3, [pc, #76]	; (800440c <vTaskStartScheduler+0xc4>)
 80043c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <vTaskStartScheduler+0xc8>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <vTaskStartScheduler+0xcc>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043d2:	f001 f895 	bl	8005500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043d6:	e00f      	b.n	80043f8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043de:	d10b      	bne.n	80043f8 <vTaskStartScheduler+0xb0>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	b672      	cpsid	i
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	b662      	cpsie	i
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e7fe      	b.n	80043f6 <vTaskStartScheduler+0xae>
}
 80043f8:	bf00      	nop
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	08006e7c 	.word	0x08006e7c
 8004404:	08004a45 	.word	0x08004a45
 8004408:	20000c50 	.word	0x20000c50
 800440c:	20000c4c 	.word	0x20000c4c
 8004410:	20000c38 	.word	0x20000c38
 8004414:	20000c30 	.word	0x20000c30

08004418 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <vTaskSuspendAll+0x18>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	4a03      	ldr	r2, [pc, #12]	; (8004430 <vTaskSuspendAll+0x18>)
 8004424:	6013      	str	r3, [r2, #0]
}
 8004426:	bf00      	nop
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	20000c54 	.word	0x20000c54

08004434 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004442:	4b42      	ldr	r3, [pc, #264]	; (800454c <xTaskResumeAll+0x118>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10b      	bne.n	8004462 <xTaskResumeAll+0x2e>
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	b672      	cpsid	i
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	b662      	cpsie	i
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	e7fe      	b.n	8004460 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004462:	f001 f8c9 	bl	80055f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004466:	4b39      	ldr	r3, [pc, #228]	; (800454c <xTaskResumeAll+0x118>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3b01      	subs	r3, #1
 800446c:	4a37      	ldr	r2, [pc, #220]	; (800454c <xTaskResumeAll+0x118>)
 800446e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004470:	4b36      	ldr	r3, [pc, #216]	; (800454c <xTaskResumeAll+0x118>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d162      	bne.n	800453e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004478:	4b35      	ldr	r3, [pc, #212]	; (8004550 <xTaskResumeAll+0x11c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d05e      	beq.n	800453e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004480:	e02f      	b.n	80044e2 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004482:	4b34      	ldr	r3, [pc, #208]	; (8004554 <xTaskResumeAll+0x120>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3318      	adds	r3, #24
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe ffe8 	bl	8003464 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3304      	adds	r3, #4
 8004498:	4618      	mov	r0, r3
 800449a:	f7fe ffe3 	bl	8003464 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <xTaskResumeAll+0x124>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d903      	bls.n	80044b2 <xTaskResumeAll+0x7e>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <xTaskResumeAll+0x124>)
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4a27      	ldr	r2, [pc, #156]	; (800455c <xTaskResumeAll+0x128>)
 80044c0:	441a      	add	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3304      	adds	r3, #4
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f7fe ff6e 	bl	80033aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d2:	4b23      	ldr	r3, [pc, #140]	; (8004560 <xTaskResumeAll+0x12c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80044dc:	4b21      	ldr	r3, [pc, #132]	; (8004564 <xTaskResumeAll+0x130>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044e2:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <xTaskResumeAll+0x120>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1cb      	bne.n	8004482 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044f0:	f000 fb5c 	bl	8004bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044f4:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <xTaskResumeAll+0x134>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d010      	beq.n	8004522 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004500:	f000 f846 	bl	8004590 <xTaskIncrementTick>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800450a:	4b16      	ldr	r3, [pc, #88]	; (8004564 <xTaskResumeAll+0x130>)
 800450c:	2201      	movs	r2, #1
 800450e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3b01      	subs	r3, #1
 8004514:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f1      	bne.n	8004500 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800451c:	4b12      	ldr	r3, [pc, #72]	; (8004568 <xTaskResumeAll+0x134>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <xTaskResumeAll+0x130>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800452a:	2301      	movs	r3, #1
 800452c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <xTaskResumeAll+0x138>)
 8004530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800453e:	f001 f88d 	bl	800565c <vPortExitCritical>

	return xAlreadyYielded;
 8004542:	68bb      	ldr	r3, [r7, #8]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000c54 	.word	0x20000c54
 8004550:	20000c2c 	.word	0x20000c2c
 8004554:	20000bec 	.word	0x20000bec
 8004558:	20000c34 	.word	0x20000c34
 800455c:	2000075c 	.word	0x2000075c
 8004560:	20000758 	.word	0x20000758
 8004564:	20000c40 	.word	0x20000c40
 8004568:	20000c3c 	.word	0x20000c3c
 800456c:	e000ed04 	.word	0xe000ed04

08004570 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004576:	4b05      	ldr	r3, [pc, #20]	; (800458c <xTaskGetTickCount+0x1c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800457c:	687b      	ldr	r3, [r7, #4]
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000c30 	.word	0x20000c30

08004590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800459a:	4b52      	ldr	r3, [pc, #328]	; (80046e4 <xTaskIncrementTick+0x154>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f040 808f 	bne.w	80046c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045a4:	4b50      	ldr	r3, [pc, #320]	; (80046e8 <xTaskIncrementTick+0x158>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045ac:	4a4e      	ldr	r2, [pc, #312]	; (80046e8 <xTaskIncrementTick+0x158>)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d121      	bne.n	80045fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80045b8:	4b4c      	ldr	r3, [pc, #304]	; (80046ec <xTaskIncrementTick+0x15c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <xTaskIncrementTick+0x4a>
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	b672      	cpsid	i
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	b662      	cpsie	i
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	e7fe      	b.n	80045d8 <xTaskIncrementTick+0x48>
 80045da:	4b44      	ldr	r3, [pc, #272]	; (80046ec <xTaskIncrementTick+0x15c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	4b43      	ldr	r3, [pc, #268]	; (80046f0 <xTaskIncrementTick+0x160>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a41      	ldr	r2, [pc, #260]	; (80046ec <xTaskIncrementTick+0x15c>)
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4a41      	ldr	r2, [pc, #260]	; (80046f0 <xTaskIncrementTick+0x160>)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b41      	ldr	r3, [pc, #260]	; (80046f4 <xTaskIncrementTick+0x164>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3301      	adds	r3, #1
 80045f4:	4a3f      	ldr	r2, [pc, #252]	; (80046f4 <xTaskIncrementTick+0x164>)
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	f000 fad8 	bl	8004bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045fc:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <xTaskIncrementTick+0x168>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	429a      	cmp	r2, r3
 8004604:	d34e      	bcc.n	80046a4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004606:	4b39      	ldr	r3, [pc, #228]	; (80046ec <xTaskIncrementTick+0x15c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <xTaskIncrementTick+0x84>
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <xTaskIncrementTick+0x86>
 8004614:	2300      	movs	r3, #0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d004      	beq.n	8004624 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800461a:	4b37      	ldr	r3, [pc, #220]	; (80046f8 <xTaskIncrementTick+0x168>)
 800461c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004620:	601a      	str	r2, [r3, #0]
					break;
 8004622:	e03f      	b.n	80046a4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004624:	4b31      	ldr	r3, [pc, #196]	; (80046ec <xTaskIncrementTick+0x15c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	d203      	bcs.n	8004644 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800463c:	4a2e      	ldr	r2, [pc, #184]	; (80046f8 <xTaskIncrementTick+0x168>)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6013      	str	r3, [r2, #0]
						break;
 8004642:	e02f      	b.n	80046a4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	3304      	adds	r3, #4
 8004648:	4618      	mov	r0, r3
 800464a:	f7fe ff0b 	bl	8003464 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	3318      	adds	r3, #24
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe ff02 	bl	8003464 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	4b25      	ldr	r3, [pc, #148]	; (80046fc <xTaskIncrementTick+0x16c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d903      	bls.n	8004674 <xTaskIncrementTick+0xe4>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4a22      	ldr	r2, [pc, #136]	; (80046fc <xTaskIncrementTick+0x16c>)
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4a1f      	ldr	r2, [pc, #124]	; (8004700 <xTaskIncrementTick+0x170>)
 8004682:	441a      	add	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	3304      	adds	r3, #4
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f7fe fe8d 	bl	80033aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <xTaskIncrementTick+0x174>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	429a      	cmp	r2, r3
 800469c:	d3b3      	bcc.n	8004606 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800469e:	2301      	movs	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046a2:	e7b0      	b.n	8004606 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046a4:	4b17      	ldr	r3, [pc, #92]	; (8004704 <xTaskIncrementTick+0x174>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046aa:	4915      	ldr	r1, [pc, #84]	; (8004700 <xTaskIncrementTick+0x170>)
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d907      	bls.n	80046cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e004      	b.n	80046cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80046c2:	4b11      	ldr	r3, [pc, #68]	; (8004708 <xTaskIncrementTick+0x178>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3301      	adds	r3, #1
 80046c8:	4a0f      	ldr	r2, [pc, #60]	; (8004708 <xTaskIncrementTick+0x178>)
 80046ca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046cc:	4b0f      	ldr	r3, [pc, #60]	; (800470c <xTaskIncrementTick+0x17c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046d8:	697b      	ldr	r3, [r7, #20]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000c54 	.word	0x20000c54
 80046e8:	20000c30 	.word	0x20000c30
 80046ec:	20000be4 	.word	0x20000be4
 80046f0:	20000be8 	.word	0x20000be8
 80046f4:	20000c44 	.word	0x20000c44
 80046f8:	20000c4c 	.word	0x20000c4c
 80046fc:	20000c34 	.word	0x20000c34
 8004700:	2000075c 	.word	0x2000075c
 8004704:	20000758 	.word	0x20000758
 8004708:	20000c3c 	.word	0x20000c3c
 800470c:	20000c40 	.word	0x20000c40

08004710 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004716:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <vTaskSwitchContext+0xa8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800471e:	4b27      	ldr	r3, [pc, #156]	; (80047bc <vTaskSwitchContext+0xac>)
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004724:	e042      	b.n	80047ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004726:	4b25      	ldr	r3, [pc, #148]	; (80047bc <vTaskSwitchContext+0xac>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800472c:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <vTaskSwitchContext+0xb0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	e011      	b.n	8004758 <vTaskSwitchContext+0x48>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <vTaskSwitchContext+0x42>
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	b672      	cpsid	i
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	b662      	cpsie	i
 800474e:	607b      	str	r3, [r7, #4]
 8004750:	e7fe      	b.n	8004750 <vTaskSwitchContext+0x40>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3b01      	subs	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	491a      	ldr	r1, [pc, #104]	; (80047c4 <vTaskSwitchContext+0xb4>)
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0e3      	beq.n	8004734 <vTaskSwitchContext+0x24>
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <vTaskSwitchContext+0xb4>)
 8004778:	4413      	add	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	3308      	adds	r3, #8
 800478e:	429a      	cmp	r2, r3
 8004790:	d104      	bne.n	800479c <vTaskSwitchContext+0x8c>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	605a      	str	r2, [r3, #4]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <vTaskSwitchContext+0xb8>)
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4a06      	ldr	r2, [pc, #24]	; (80047c0 <vTaskSwitchContext+0xb0>)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6013      	str	r3, [r2, #0]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	20000c54 	.word	0x20000c54
 80047bc:	20000c40 	.word	0x20000c40
 80047c0:	20000c34 	.word	0x20000c34
 80047c4:	2000075c 	.word	0x2000075c
 80047c8:	20000758 	.word	0x20000758

080047cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <vTaskPlaceOnEventList+0x28>
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	b672      	cpsid	i
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	b662      	cpsie	i
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	e7fe      	b.n	80047f2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <vTaskPlaceOnEventList+0x48>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3318      	adds	r3, #24
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7fe fdf8 	bl	80033f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004802:	2101      	movs	r1, #1
 8004804:	6838      	ldr	r0, [r7, #0]
 8004806:	f000 fa85 	bl	8004d14 <prvAddCurrentTaskToDelayedList>
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000758 	.word	0x20000758

08004818 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <vTaskPlaceOnEventListRestricted+0x2a>
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	b672      	cpsid	i
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	b662      	cpsie	i
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	e7fe      	b.n	8004840 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004842:	4b0a      	ldr	r3, [pc, #40]	; (800486c <vTaskPlaceOnEventListRestricted+0x54>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3318      	adds	r3, #24
 8004848:	4619      	mov	r1, r3
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7fe fdad 	bl	80033aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800485a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	68b8      	ldr	r0, [r7, #8]
 8004860:	f000 fa58 	bl	8004d14 <prvAddCurrentTaskToDelayedList>
	}
 8004864:	bf00      	nop
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000758 	.word	0x20000758

08004870 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10b      	bne.n	800489e <xTaskRemoveFromEventList+0x2e>
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	b672      	cpsid	i
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	b662      	cpsie	i
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e7fe      	b.n	800489c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	3318      	adds	r3, #24
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fe fdde 	bl	8003464 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a8:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <xTaskRemoveFromEventList+0xb0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d11d      	bne.n	80048ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe fdd5 	bl	8003464 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048be:	4b19      	ldr	r3, [pc, #100]	; (8004924 <xTaskRemoveFromEventList+0xb4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d903      	bls.n	80048ce <xTaskRemoveFromEventList+0x5e>
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	4a16      	ldr	r2, [pc, #88]	; (8004924 <xTaskRemoveFromEventList+0xb4>)
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4a13      	ldr	r2, [pc, #76]	; (8004928 <xTaskRemoveFromEventList+0xb8>)
 80048dc:	441a      	add	r2, r3
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f7fe fd60 	bl	80033aa <vListInsertEnd>
 80048ea:	e005      	b.n	80048f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	3318      	adds	r3, #24
 80048f0:	4619      	mov	r1, r3
 80048f2:	480e      	ldr	r0, [pc, #56]	; (800492c <xTaskRemoveFromEventList+0xbc>)
 80048f4:	f7fe fd59 	bl	80033aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <xTaskRemoveFromEventList+0xc0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	429a      	cmp	r2, r3
 8004904:	d905      	bls.n	8004912 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <xTaskRemoveFromEventList+0xc4>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e001      	b.n	8004916 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004916:	697b      	ldr	r3, [r7, #20]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000c54 	.word	0x20000c54
 8004924:	20000c34 	.word	0x20000c34
 8004928:	2000075c 	.word	0x2000075c
 800492c:	20000bec 	.word	0x20000bec
 8004930:	20000758 	.word	0x20000758
 8004934:	20000c40 	.word	0x20000c40

08004938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <vTaskInternalSetTimeOutState+0x24>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <vTaskInternalSetTimeOutState+0x28>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	605a      	str	r2, [r3, #4]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000c44 	.word	0x20000c44
 8004960:	20000c30 	.word	0x20000c30

08004964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <xTaskCheckForTimeOut+0x28>
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	b672      	cpsid	i
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	b662      	cpsie	i
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	e7fe      	b.n	800498a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <xTaskCheckForTimeOut+0x46>
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	b672      	cpsid	i
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	b662      	cpsie	i
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e7fe      	b.n	80049a8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80049aa:	f000 fe25 	bl	80055f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049ae:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <xTaskCheckForTimeOut+0xc0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c6:	d102      	bne.n	80049ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	e023      	b.n	8004a16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <xTaskCheckForTimeOut+0xc4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d007      	beq.n	80049ea <xTaskCheckForTimeOut+0x86>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	e015      	b.n	8004a16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d20b      	bcs.n	8004a0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ff99 	bl	8004938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	e004      	b.n	8004a16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a16:	f000 fe21 	bl	800565c <vPortExitCritical>

	return xReturn;
 8004a1a:	69fb      	ldr	r3, [r7, #28]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3720      	adds	r7, #32
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000c30 	.word	0x20000c30
 8004a28:	20000c44 	.word	0x20000c44

08004a2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <vTaskMissedYield+0x14>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	20000c40 	.word	0x20000c40

08004a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a4c:	f000 f852 	bl	8004af4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a50:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <prvIdleTask+0x28>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d9f9      	bls.n	8004a4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <prvIdleTask+0x2c>)
 8004a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a68:	e7f0      	b.n	8004a4c <prvIdleTask+0x8>
 8004a6a:	bf00      	nop
 8004a6c:	2000075c 	.word	0x2000075c
 8004a70:	e000ed04 	.word	0xe000ed04

08004a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	607b      	str	r3, [r7, #4]
 8004a7e:	e00c      	b.n	8004a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4a12      	ldr	r2, [pc, #72]	; (8004ad4 <prvInitialiseTaskLists+0x60>)
 8004a8c:	4413      	add	r3, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fc5e 	bl	8003350 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3301      	adds	r3, #1
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b37      	cmp	r3, #55	; 0x37
 8004a9e:	d9ef      	bls.n	8004a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004aa0:	480d      	ldr	r0, [pc, #52]	; (8004ad8 <prvInitialiseTaskLists+0x64>)
 8004aa2:	f7fe fc55 	bl	8003350 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aa6:	480d      	ldr	r0, [pc, #52]	; (8004adc <prvInitialiseTaskLists+0x68>)
 8004aa8:	f7fe fc52 	bl	8003350 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004aac:	480c      	ldr	r0, [pc, #48]	; (8004ae0 <prvInitialiseTaskLists+0x6c>)
 8004aae:	f7fe fc4f 	bl	8003350 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ab2:	480c      	ldr	r0, [pc, #48]	; (8004ae4 <prvInitialiseTaskLists+0x70>)
 8004ab4:	f7fe fc4c 	bl	8003350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ab8:	480b      	ldr	r0, [pc, #44]	; (8004ae8 <prvInitialiseTaskLists+0x74>)
 8004aba:	f7fe fc49 	bl	8003350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <prvInitialiseTaskLists+0x78>)
 8004ac0:	4a05      	ldr	r2, [pc, #20]	; (8004ad8 <prvInitialiseTaskLists+0x64>)
 8004ac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <prvInitialiseTaskLists+0x7c>)
 8004ac6:	4a05      	ldr	r2, [pc, #20]	; (8004adc <prvInitialiseTaskLists+0x68>)
 8004ac8:	601a      	str	r2, [r3, #0]
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	2000075c 	.word	0x2000075c
 8004ad8:	20000bbc 	.word	0x20000bbc
 8004adc:	20000bd0 	.word	0x20000bd0
 8004ae0:	20000bec 	.word	0x20000bec
 8004ae4:	20000c00 	.word	0x20000c00
 8004ae8:	20000c18 	.word	0x20000c18
 8004aec:	20000be4 	.word	0x20000be4
 8004af0:	20000be8 	.word	0x20000be8

08004af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004afa:	e019      	b.n	8004b30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004afc:	f000 fd7c 	bl	80055f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b00:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <prvCheckTasksWaitingTermination+0x4c>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe fca9 	bl	8003464 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <prvCheckTasksWaitingTermination+0x50>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <prvCheckTasksWaitingTermination+0x50>)
 8004b1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <prvCheckTasksWaitingTermination+0x54>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <prvCheckTasksWaitingTermination+0x54>)
 8004b24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b26:	f000 fd99 	bl	800565c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f80e 	bl	8004b4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <prvCheckTasksWaitingTermination+0x54>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e1      	bne.n	8004afc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000c00 	.word	0x20000c00
 8004b44:	20000c2c 	.word	0x20000c2c
 8004b48:	20000c14 	.word	0x20000c14

08004b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d108      	bne.n	8004b70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 ff32 	bl	80059cc <vPortFree>
				vPortFree( pxTCB );
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 ff2f 	bl	80059cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b6e:	e019      	b.n	8004ba4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d103      	bne.n	8004b82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 ff26 	bl	80059cc <vPortFree>
	}
 8004b80:	e010      	b.n	8004ba4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d00b      	beq.n	8004ba4 <prvDeleteTCB+0x58>
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	b672      	cpsid	i
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	b662      	cpsie	i
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e7fe      	b.n	8004ba2 <prvDeleteTCB+0x56>
	}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <prvResetNextTaskUnblockTime+0x44>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <prvResetNextTaskUnblockTime+0x14>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <prvResetNextTaskUnblockTime+0x16>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <prvResetNextTaskUnblockTime+0x48>)
 8004bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bcc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bce:	e008      	b.n	8004be2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <prvResetNextTaskUnblockTime+0x44>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4a05      	ldr	r2, [pc, #20]	; (8004bf4 <prvResetNextTaskUnblockTime+0x48>)
 8004be0:	6013      	str	r3, [r2, #0]
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000be4 	.word	0x20000be4
 8004bf4:	20000c4c 	.word	0x20000c4c

08004bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <xTaskGetSchedulerState+0x34>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d102      	bne.n	8004c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c06:	2301      	movs	r3, #1
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	e008      	b.n	8004c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c0c:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <xTaskGetSchedulerState+0x38>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c14:	2302      	movs	r3, #2
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	e001      	b.n	8004c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c1e:	687b      	ldr	r3, [r7, #4]
	}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	20000c38 	.word	0x20000c38
 8004c30:	20000c54 	.word	0x20000c54

08004c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d058      	beq.n	8004cfc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	; (8004d08 <xTaskPriorityDisinherit+0xd4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d00b      	beq.n	8004c6c <xTaskPriorityDisinherit+0x38>
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	b672      	cpsid	i
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	b662      	cpsie	i
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	e7fe      	b.n	8004c6a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <xTaskPriorityDisinherit+0x58>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	b672      	cpsid	i
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	b662      	cpsie	i
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	e7fe      	b.n	8004c8a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c90:	1e5a      	subs	r2, r3, #1
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d02c      	beq.n	8004cfc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d128      	bne.n	8004cfc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fbd8 	bl	8003464 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ccc:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <xTaskPriorityDisinherit+0xd8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d903      	bls.n	8004cdc <xTaskPriorityDisinherit+0xa8>
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	4a0c      	ldr	r2, [pc, #48]	; (8004d0c <xTaskPriorityDisinherit+0xd8>)
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <xTaskPriorityDisinherit+0xdc>)
 8004cea:	441a      	add	r2, r3
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f7fe fb59 	bl	80033aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cfc:	697b      	ldr	r3, [r7, #20]
	}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000758 	.word	0x20000758
 8004d0c:	20000c34 	.word	0x20000c34
 8004d10:	2000075c 	.word	0x2000075c

08004d14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d1e:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d24:	4b20      	ldr	r3, [pc, #128]	; (8004da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fb9a 	bl	8003464 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d36:	d10a      	bne.n	8004d4e <prvAddCurrentTaskToDelayedList+0x3a>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4619      	mov	r1, r3
 8004d46:	4819      	ldr	r0, [pc, #100]	; (8004dac <prvAddCurrentTaskToDelayedList+0x98>)
 8004d48:	f7fe fb2f 	bl	80033aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d4c:	e026      	b.n	8004d9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4413      	add	r3, r2
 8004d54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d56:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d209      	bcs.n	8004d7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f7fe fb3d 	bl	80033f2 <vListInsert>
}
 8004d78:	e010      	b.n	8004d9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d7a:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f7fe fb33 	bl	80033f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d202      	bcs.n	8004d9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d96:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	6013      	str	r3, [r2, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000c30 	.word	0x20000c30
 8004da8:	20000758 	.word	0x20000758
 8004dac:	20000c18 	.word	0x20000c18
 8004db0:	20000be8 	.word	0x20000be8
 8004db4:	20000be4 	.word	0x20000be4
 8004db8:	20000c4c 	.word	0x20000c4c

08004dbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004dc6:	f000 fad1 	bl	800536c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004dca:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <xTimerCreateTimerTask+0x84>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d021      	beq.n	8004e16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004dda:	1d3a      	adds	r2, r7, #4
 8004ddc:	f107 0108 	add.w	r1, r7, #8
 8004de0:	f107 030c 	add.w	r3, r7, #12
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fe fa99 	bl	800331c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	9202      	str	r2, [sp, #8]
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	2302      	movs	r3, #2
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	460a      	mov	r2, r1
 8004dfc:	4911      	ldr	r1, [pc, #68]	; (8004e44 <xTimerCreateTimerTask+0x88>)
 8004dfe:	4812      	ldr	r0, [pc, #72]	; (8004e48 <xTimerCreateTimerTask+0x8c>)
 8004e00:	f7ff f850 	bl	8003ea4 <xTaskCreateStatic>
 8004e04:	4602      	mov	r2, r0
 8004e06:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <xTimerCreateTimerTask+0x90>)
 8004e08:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e0a:	4b10      	ldr	r3, [pc, #64]	; (8004e4c <xTimerCreateTimerTask+0x90>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e12:	2301      	movs	r3, #1
 8004e14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <xTimerCreateTimerTask+0x78>
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	b672      	cpsid	i
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	b662      	cpsie	i
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	e7fe      	b.n	8004e32 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8004e34:	697b      	ldr	r3, [r7, #20]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000c88 	.word	0x20000c88
 8004e44:	08006e84 	.word	0x08006e84
 8004e48:	08004f71 	.word	0x08004f71
 8004e4c:	20000c8c 	.word	0x20000c8c

08004e50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	; 0x28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <xTimerGenericCommand+0x30>
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	b672      	cpsid	i
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	b662      	cpsie	i
 8004e7c:	623b      	str	r3, [r7, #32]
 8004e7e:	e7fe      	b.n	8004e7e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e80:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <xTimerGenericCommand+0x98>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d02a      	beq.n	8004ede <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b05      	cmp	r3, #5
 8004e98:	dc18      	bgt.n	8004ecc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e9a:	f7ff fead 	bl	8004bf8 <xTaskGetSchedulerState>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d109      	bne.n	8004eb8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ea4:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <xTimerGenericCommand+0x98>)
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	f107 0110 	add.w	r1, r7, #16
 8004eac:	2300      	movs	r3, #0
 8004eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb0:	f7fe fc0c 	bl	80036cc <xQueueGenericSend>
 8004eb4:	6278      	str	r0, [r7, #36]	; 0x24
 8004eb6:	e012      	b.n	8004ede <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <xTimerGenericCommand+0x98>)
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	f107 0110 	add.w	r1, r7, #16
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f7fe fc02 	bl	80036cc <xQueueGenericSend>
 8004ec8:	6278      	str	r0, [r7, #36]	; 0x24
 8004eca:	e008      	b.n	8004ede <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <xTimerGenericCommand+0x98>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	f107 0110 	add.w	r1, r7, #16
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	f7fe fcfa 	bl	80038d0 <xQueueGenericSendFromISR>
 8004edc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3728      	adds	r7, #40	; 0x28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000c88 	.word	0x20000c88

08004eec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <prvProcessExpiredTimer+0x80>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe faad 	bl	8003464 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d123      	bne.n	8004f5a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	18d1      	adds	r1, r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	6978      	ldr	r0, [r7, #20]
 8004f20:	f000 f8ca 	bl	80050b8 <prvInsertTimerInActiveList>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d017      	beq.n	8004f5a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	2100      	movs	r1, #0
 8004f34:	6978      	ldr	r0, [r7, #20]
 8004f36:	f7ff ff8b 	bl	8004e50 <xTimerGenericCommand>
 8004f3a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <prvProcessExpiredTimer+0x6e>
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	b672      	cpsid	i
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	b662      	cpsie	i
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e7fe      	b.n	8004f58 <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	6978      	ldr	r0, [r7, #20]
 8004f60:	4798      	blx	r3
}
 8004f62:	bf00      	nop
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000c80 	.word	0x20000c80

08004f70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f857 	bl	8005030 <prvGetNextExpireTime>
 8004f82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4619      	mov	r1, r3
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f803 	bl	8004f94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f8e:	f000 f8d5 	bl	800513c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f92:	e7f1      	b.n	8004f78 <prvTimerTask+0x8>

08004f94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f9e:	f7ff fa3b 	bl	8004418 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fa2:	f107 0308 	add.w	r3, r7, #8
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f866 	bl	8005078 <prvSampleTimeNow>
 8004fac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d130      	bne.n	8005016 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <prvProcessTimerOrBlockTask+0x3c>
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d806      	bhi.n	8004fd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004fc2:	f7ff fa37 	bl	8004434 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004fc6:	68f9      	ldr	r1, [r7, #12]
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ff8f 	bl	8004eec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004fce:	e024      	b.n	800501a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d008      	beq.n	8004fe8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004fd6:	4b13      	ldr	r3, [pc, #76]	; (8005024 <prvProcessTimerOrBlockTask+0x90>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <prvProcessTimerOrBlockTask+0x94>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f7fe ff21 	bl	8003e3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ffa:	f7ff fa1b 	bl	8004434 <xTaskResumeAll>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10a      	bne.n	800501a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005004:	4b09      	ldr	r3, [pc, #36]	; (800502c <prvProcessTimerOrBlockTask+0x98>)
 8005006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	f3bf 8f6f 	isb	sy
}
 8005014:	e001      	b.n	800501a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005016:	f7ff fa0d 	bl	8004434 <xTaskResumeAll>
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000c84 	.word	0x20000c84
 8005028:	20000c88 	.word	0x20000c88
 800502c:	e000ed04 	.word	0xe000ed04

08005030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005038:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <prvGetNextExpireTime+0x44>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf0c      	ite	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	2300      	movne	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d105      	bne.n	8005062 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005056:	4b07      	ldr	r3, [pc, #28]	; (8005074 <prvGetNextExpireTime+0x44>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e001      	b.n	8005066 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005066:	68fb      	ldr	r3, [r7, #12]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	20000c80 	.word	0x20000c80

08005078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005080:	f7ff fa76 	bl	8004570 <xTaskGetTickCount>
 8005084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <prvSampleTimeNow+0x3c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	429a      	cmp	r2, r3
 800508e:	d205      	bcs.n	800509c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005090:	f000 f90a 	bl	80052a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e002      	b.n	80050a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050a2:	4a04      	ldr	r2, [pc, #16]	; (80050b4 <prvSampleTimeNow+0x3c>)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050a8:	68fb      	ldr	r3, [r7, #12]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000c90 	.word	0x20000c90

080050b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d812      	bhi.n	8005104 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d302      	bcc.n	80050f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e01b      	b.n	800512a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050f2:	4b10      	ldr	r3, [pc, #64]	; (8005134 <prvInsertTimerInActiveList+0x7c>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7fe f978 	bl	80033f2 <vListInsert>
 8005102:	e012      	b.n	800512a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d206      	bcs.n	800511a <prvInsertTimerInActiveList+0x62>
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d302      	bcc.n	800511a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005114:	2301      	movs	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e007      	b.n	800512a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800511a:	4b07      	ldr	r3, [pc, #28]	; (8005138 <prvInsertTimerInActiveList+0x80>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3304      	adds	r3, #4
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f7fe f964 	bl	80033f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800512a:	697b      	ldr	r3, [r7, #20]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000c84 	.word	0x20000c84
 8005138:	20000c80 	.word	0x20000c80

0800513c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08e      	sub	sp, #56	; 0x38
 8005140:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005142:	e09f      	b.n	8005284 <prvProcessReceivedCommands+0x148>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	da19      	bge.n	800517e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800514a:	1d3b      	adds	r3, r7, #4
 800514c:	3304      	adds	r3, #4
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10b      	bne.n	800516e <prvProcessReceivedCommands+0x32>
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	b672      	cpsid	i
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	b662      	cpsie	i
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	e7fe      	b.n	800516c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005174:	6850      	ldr	r0, [r2, #4]
 8005176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005178:	6892      	ldr	r2, [r2, #8]
 800517a:	4611      	mov	r1, r2
 800517c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	db7e      	blt.n	8005282 <prvProcessReceivedCommands+0x146>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	3304      	adds	r3, #4
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe f965 	bl	8003464 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800519a:	463b      	mov	r3, r7
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff ff6b 	bl	8005078 <prvSampleTimeNow>
 80051a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b09      	cmp	r3, #9
 80051a8:	d86c      	bhi.n	8005284 <prvProcessReceivedCommands+0x148>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <prvProcessReceivedCommands+0x74>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051d9 	.word	0x080051d9
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051d9 	.word	0x080051d9
 80051bc:	08005285 	.word	0x08005285
 80051c0:	08005237 	.word	0x08005237
 80051c4:	08005271 	.word	0x08005271
 80051c8:	080051d9 	.word	0x080051d9
 80051cc:	080051d9 	.word	0x080051d9
 80051d0:	08005285 	.word	0x08005285
 80051d4:	08005237 	.word	0x08005237
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	18d1      	adds	r1, r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e6:	f7ff ff67 	bl	80050b8 <prvInsertTimerInActiveList>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d049      	beq.n	8005284 <prvProcessReceivedCommands+0x148>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051f6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d141      	bne.n	8005284 <prvProcessReceivedCommands+0x148>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	441a      	add	r2, r3
 8005208:	2300      	movs	r3, #0
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	2300      	movs	r3, #0
 800520e:	2100      	movs	r1, #0
 8005210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005212:	f7ff fe1d 	bl	8004e50 <xTimerGenericCommand>
 8005216:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d132      	bne.n	8005284 <prvProcessReceivedCommands+0x148>
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	b672      	cpsid	i
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	b662      	cpsie	i
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	e7fe      	b.n	8005234 <prvProcessReceivedCommands+0xf8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10b      	bne.n	800525c <prvProcessReceivedCommands+0x120>
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	b672      	cpsid	i
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	b662      	cpsie	i
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e7fe      	b.n	800525a <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	18d1      	adds	r1, r2, r3
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526a:	f7ff ff25 	bl	80050b8 <prvInsertTimerInActiveList>
					break;
 800526e:	e009      	b.n	8005284 <prvProcessReceivedCommands+0x148>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d104      	bne.n	8005284 <prvProcessReceivedCommands+0x148>
						{
							vPortFree( pxTimer );
 800527a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800527c:	f000 fba6 	bl	80059cc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005280:	e000      	b.n	8005284 <prvProcessReceivedCommands+0x148>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005282:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005284:	4b07      	ldr	r3, [pc, #28]	; (80052a4 <prvProcessReceivedCommands+0x168>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	1d39      	adds	r1, r7, #4
 800528a:	2200      	movs	r2, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f7fe fbbb 	bl	8003a08 <xQueueReceive>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	f47f af55 	bne.w	8005144 <prvProcessReceivedCommands+0x8>
	}
}
 800529a:	bf00      	nop
 800529c:	3730      	adds	r7, #48	; 0x30
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000c88 	.word	0x20000c88

080052a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052ae:	e046      	b.n	800533e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052b0:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <prvSwitchTimerLists+0xbc>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052ba:	4b2a      	ldr	r3, [pc, #168]	; (8005364 <prvSwitchTimerLists+0xbc>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe f8cb 	bl	8003464 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d12f      	bne.n	800533e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4413      	add	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d90e      	bls.n	800530e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052fc:	4b19      	ldr	r3, [pc, #100]	; (8005364 <prvSwitchTimerLists+0xbc>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f7fe f873 	bl	80033f2 <vListInsert>
 800530c:	e017      	b.n	800533e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800530e:	2300      	movs	r3, #0
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	2300      	movs	r3, #0
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	2100      	movs	r1, #0
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff fd99 	bl	8004e50 <xTimerGenericCommand>
 800531e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10b      	bne.n	800533e <prvSwitchTimerLists+0x96>
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	b672      	cpsid	i
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	b662      	cpsie	i
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	e7fe      	b.n	800533c <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <prvSwitchTimerLists+0xbc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1b3      	bne.n	80052b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <prvSwitchTimerLists+0xbc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800534e:	4b06      	ldr	r3, [pc, #24]	; (8005368 <prvSwitchTimerLists+0xc0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a04      	ldr	r2, [pc, #16]	; (8005364 <prvSwitchTimerLists+0xbc>)
 8005354:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005356:	4a04      	ldr	r2, [pc, #16]	; (8005368 <prvSwitchTimerLists+0xc0>)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	6013      	str	r3, [r2, #0]
}
 800535c:	bf00      	nop
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20000c80 	.word	0x20000c80
 8005368:	20000c84 	.word	0x20000c84

0800536c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005372:	f000 f941 	bl	80055f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005376:	4b15      	ldr	r3, [pc, #84]	; (80053cc <prvCheckForValidListAndQueue+0x60>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d120      	bne.n	80053c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800537e:	4814      	ldr	r0, [pc, #80]	; (80053d0 <prvCheckForValidListAndQueue+0x64>)
 8005380:	f7fd ffe6 	bl	8003350 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005384:	4813      	ldr	r0, [pc, #76]	; (80053d4 <prvCheckForValidListAndQueue+0x68>)
 8005386:	f7fd ffe3 	bl	8003350 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <prvCheckForValidListAndQueue+0x6c>)
 800538c:	4a10      	ldr	r2, [pc, #64]	; (80053d0 <prvCheckForValidListAndQueue+0x64>)
 800538e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005390:	4b12      	ldr	r3, [pc, #72]	; (80053dc <prvCheckForValidListAndQueue+0x70>)
 8005392:	4a10      	ldr	r2, [pc, #64]	; (80053d4 <prvCheckForValidListAndQueue+0x68>)
 8005394:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005396:	2300      	movs	r3, #0
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <prvCheckForValidListAndQueue+0x74>)
 800539c:	4a11      	ldr	r2, [pc, #68]	; (80053e4 <prvCheckForValidListAndQueue+0x78>)
 800539e:	2110      	movs	r1, #16
 80053a0:	200a      	movs	r0, #10
 80053a2:	f7fe f8f3 	bl	800358c <xQueueGenericCreateStatic>
 80053a6:	4602      	mov	r2, r0
 80053a8:	4b08      	ldr	r3, [pc, #32]	; (80053cc <prvCheckForValidListAndQueue+0x60>)
 80053aa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80053ac:	4b07      	ldr	r3, [pc, #28]	; (80053cc <prvCheckForValidListAndQueue+0x60>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <prvCheckForValidListAndQueue+0x60>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	490b      	ldr	r1, [pc, #44]	; (80053e8 <prvCheckForValidListAndQueue+0x7c>)
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe fd16 	bl	8003dec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053c0:	f000 f94c 	bl	800565c <vPortExitCritical>
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000c88 	.word	0x20000c88
 80053d0:	20000c58 	.word	0x20000c58
 80053d4:	20000c6c 	.word	0x20000c6c
 80053d8:	20000c80 	.word	0x20000c80
 80053dc:	20000c84 	.word	0x20000c84
 80053e0:	20000d34 	.word	0x20000d34
 80053e4:	20000c94 	.word	0x20000c94
 80053e8:	08006e8c 	.word	0x08006e8c

080053ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3b04      	subs	r3, #4
 80053fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3b04      	subs	r3, #4
 800540a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3b04      	subs	r3, #4
 800541a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800541c:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <pxPortInitialiseStack+0x64>)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3b14      	subs	r3, #20
 8005426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3b04      	subs	r3, #4
 8005432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f06f 0202 	mvn.w	r2, #2
 800543a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3b20      	subs	r3, #32
 8005440:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005442:	68fb      	ldr	r3, [r7, #12]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	08005455 	.word	0x08005455

08005454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <prvTaskExitError+0x58>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005466:	d00b      	beq.n	8005480 <prvTaskExitError+0x2c>
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	b672      	cpsid	i
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	b662      	cpsie	i
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e7fe      	b.n	800547e <prvTaskExitError+0x2a>
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	b672      	cpsid	i
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	b662      	cpsie	i
 8005494:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005496:	bf00      	nop
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0fc      	beq.n	8005498 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20000008 	.word	0x20000008

080054b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <pxCurrentTCBConst2>)
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	6808      	ldr	r0, [r1, #0]
 80054b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ba:	f380 8809 	msr	PSP, r0
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f04f 0000 	mov.w	r0, #0
 80054c6:	f380 8811 	msr	BASEPRI, r0
 80054ca:	4770      	bx	lr
 80054cc:	f3af 8000 	nop.w

080054d0 <pxCurrentTCBConst2>:
 80054d0:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop

080054d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80054d8:	4808      	ldr	r0, [pc, #32]	; (80054fc <prvPortStartFirstTask+0x24>)
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	6800      	ldr	r0, [r0, #0]
 80054de:	f380 8808 	msr	MSP, r0
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f380 8814 	msr	CONTROL, r0
 80054ea:	b662      	cpsie	i
 80054ec:	b661      	cpsie	f
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	df00      	svc	0
 80054f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054fa:	bf00      	nop
 80054fc:	e000ed08 	.word	0xe000ed08

08005500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005506:	4b36      	ldr	r3, [pc, #216]	; (80055e0 <xPortStartScheduler+0xe0>)
 8005508:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	22ff      	movs	r2, #255	; 0xff
 8005516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005528:	b2da      	uxtb	r2, r3
 800552a:	4b2e      	ldr	r3, [pc, #184]	; (80055e4 <xPortStartScheduler+0xe4>)
 800552c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800552e:	4b2e      	ldr	r3, [pc, #184]	; (80055e8 <xPortStartScheduler+0xe8>)
 8005530:	2207      	movs	r2, #7
 8005532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005534:	e009      	b.n	800554a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005536:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <xPortStartScheduler+0xe8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3b01      	subs	r3, #1
 800553c:	4a2a      	ldr	r2, [pc, #168]	; (80055e8 <xPortStartScheduler+0xe8>)
 800553e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	b2db      	uxtb	r3, r3
 8005548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b80      	cmp	r3, #128	; 0x80
 8005554:	d0ef      	beq.n	8005536 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <xPortStartScheduler+0xe8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f1c3 0307 	rsb	r3, r3, #7
 800555e:	2b04      	cmp	r3, #4
 8005560:	d00b      	beq.n	800557a <xPortStartScheduler+0x7a>
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	b672      	cpsid	i
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	b662      	cpsie	i
 8005576:	60bb      	str	r3, [r7, #8]
 8005578:	e7fe      	b.n	8005578 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800557a:	4b1b      	ldr	r3, [pc, #108]	; (80055e8 <xPortStartScheduler+0xe8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <xPortStartScheduler+0xe8>)
 8005582:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005584:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <xPortStartScheduler+0xe8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800558c:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <xPortStartScheduler+0xe8>)
 800558e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	b2da      	uxtb	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005598:	4b14      	ldr	r3, [pc, #80]	; (80055ec <xPortStartScheduler+0xec>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a13      	ldr	r2, [pc, #76]	; (80055ec <xPortStartScheduler+0xec>)
 800559e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055a4:	4b11      	ldr	r3, [pc, #68]	; (80055ec <xPortStartScheduler+0xec>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a10      	ldr	r2, [pc, #64]	; (80055ec <xPortStartScheduler+0xec>)
 80055aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055b0:	f000 f8d4 	bl	800575c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <xPortStartScheduler+0xf0>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055ba:	f000 f8f3 	bl	80057a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055be:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <xPortStartScheduler+0xf4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a0c      	ldr	r2, [pc, #48]	; (80055f4 <xPortStartScheduler+0xf4>)
 80055c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055ca:	f7ff ff85 	bl	80054d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055ce:	f7ff f89f 	bl	8004710 <vTaskSwitchContext>
	prvTaskExitError();
 80055d2:	f7ff ff3f 	bl	8005454 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	e000e400 	.word	0xe000e400
 80055e4:	20000d84 	.word	0x20000d84
 80055e8:	20000d88 	.word	0x20000d88
 80055ec:	e000ed20 	.word	0xe000ed20
 80055f0:	20000008 	.word	0x20000008
 80055f4:	e000ef34 	.word	0xe000ef34

080055f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	b672      	cpsid	i
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	b662      	cpsie	i
 8005612:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005614:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <vPortEnterCritical+0x5c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	4a0e      	ldr	r2, [pc, #56]	; (8005654 <vPortEnterCritical+0x5c>)
 800561c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800561e:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <vPortEnterCritical+0x5c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d110      	bne.n	8005648 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005626:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <vPortEnterCritical+0x60>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <vPortEnterCritical+0x50>
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	b672      	cpsid	i
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	b662      	cpsie	i
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	e7fe      	b.n	8005646 <vPortEnterCritical+0x4e>
	}
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	20000008 	.word	0x20000008
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005662:	4b12      	ldr	r3, [pc, #72]	; (80056ac <vPortExitCritical+0x50>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <vPortExitCritical+0x26>
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	b672      	cpsid	i
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	b662      	cpsie	i
 800567e:	607b      	str	r3, [r7, #4]
 8005680:	e7fe      	b.n	8005680 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <vPortExitCritical+0x50>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3b01      	subs	r3, #1
 8005688:	4a08      	ldr	r2, [pc, #32]	; (80056ac <vPortExitCritical+0x50>)
 800568a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800568c:	4b07      	ldr	r3, [pc, #28]	; (80056ac <vPortExitCritical+0x50>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <vPortExitCritical+0x42>
 8005694:	2300      	movs	r3, #0
 8005696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000008 	.word	0x20000008

080056b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056b0:	f3ef 8009 	mrs	r0, PSP
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	4b15      	ldr	r3, [pc, #84]	; (8005710 <pxCurrentTCBConst>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	f01e 0f10 	tst.w	lr, #16
 80056c0:	bf08      	it	eq
 80056c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ca:	6010      	str	r0, [r2, #0]
 80056cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056d4:	b672      	cpsid	i
 80056d6:	f380 8811 	msr	BASEPRI, r0
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	b662      	cpsie	i
 80056e4:	f7ff f814 	bl	8004710 <vTaskSwitchContext>
 80056e8:	f04f 0000 	mov.w	r0, #0
 80056ec:	f380 8811 	msr	BASEPRI, r0
 80056f0:	bc09      	pop	{r0, r3}
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	6808      	ldr	r0, [r1, #0]
 80056f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fa:	f01e 0f10 	tst.w	lr, #16
 80056fe:	bf08      	it	eq
 8005700:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005704:	f380 8809 	msr	PSP, r0
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop

08005710 <pxCurrentTCBConst>:
 8005710:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop

08005718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	b672      	cpsid	i
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	b662      	cpsie	i
 8005732:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005734:	f7fe ff2c 	bl	8004590 <xTaskIncrementTick>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800573e:	4b06      	ldr	r3, [pc, #24]	; (8005758 <xPortSysTickHandler+0x40>)
 8005740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	2300      	movs	r3, #0
 8005748:	603b      	str	r3, [r7, #0]
	__asm volatile
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <vPortSetupTimerInterrupt+0x34>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <vPortSetupTimerInterrupt+0x38>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <vPortSetupTimerInterrupt+0x3c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a0a      	ldr	r2, [pc, #40]	; (800579c <vPortSetupTimerInterrupt+0x40>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <vPortSetupTimerInterrupt+0x44>)
 800577a:	3b01      	subs	r3, #1
 800577c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800577e:	4b04      	ldr	r3, [pc, #16]	; (8005790 <vPortSetupTimerInterrupt+0x34>)
 8005780:	2207      	movs	r2, #7
 8005782:	601a      	str	r2, [r3, #0]
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	e000e010 	.word	0xe000e010
 8005794:	e000e018 	.word	0xe000e018
 8005798:	20000018 	.word	0x20000018
 800579c:	10624dd3 	.word	0x10624dd3
 80057a0:	e000e014 	.word	0xe000e014

080057a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057b4 <vPortEnableVFP+0x10>
 80057a8:	6801      	ldr	r1, [r0, #0]
 80057aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057ae:	6001      	str	r1, [r0, #0]
 80057b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057b2:	bf00      	nop
 80057b4:	e000ed88 	.word	0xe000ed88

080057b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057be:	f3ef 8305 	mrs	r3, IPSR
 80057c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b0f      	cmp	r3, #15
 80057c8:	d915      	bls.n	80057f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ca:	4a18      	ldr	r2, [pc, #96]	; (800582c <vPortValidateInterruptPriority+0x74>)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057d4:	4b16      	ldr	r3, [pc, #88]	; (8005830 <vPortValidateInterruptPriority+0x78>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	7afa      	ldrb	r2, [r7, #11]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d20b      	bcs.n	80057f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	b672      	cpsid	i
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	b662      	cpsie	i
 80057f2:	607b      	str	r3, [r7, #4]
 80057f4:	e7fe      	b.n	80057f4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057f6:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <vPortValidateInterruptPriority+0x7c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057fe:	4b0e      	ldr	r3, [pc, #56]	; (8005838 <vPortValidateInterruptPriority+0x80>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d90b      	bls.n	800581e <vPortValidateInterruptPriority+0x66>
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	b672      	cpsid	i
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	b662      	cpsie	i
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	e7fe      	b.n	800581c <vPortValidateInterruptPriority+0x64>
	}
 800581e:	bf00      	nop
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	e000e3f0 	.word	0xe000e3f0
 8005830:	20000d84 	.word	0x20000d84
 8005834:	e000ed0c 	.word	0xe000ed0c
 8005838:	20000d88 	.word	0x20000d88

0800583c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	; 0x28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005848:	f7fe fde6 	bl	8004418 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800584c:	4b5a      	ldr	r3, [pc, #360]	; (80059b8 <pvPortMalloc+0x17c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005854:	f000 f916 	bl	8005a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005858:	4b58      	ldr	r3, [pc, #352]	; (80059bc <pvPortMalloc+0x180>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	f040 8090 	bne.w	8005986 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01e      	beq.n	80058aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800586c:	2208      	movs	r2, #8
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4413      	add	r3, r2
 8005872:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	2b00      	cmp	r3, #0
 800587c:	d015      	beq.n	80058aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f023 0307 	bic.w	r3, r3, #7
 8005884:	3308      	adds	r3, #8
 8005886:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00b      	beq.n	80058aa <pvPortMalloc+0x6e>
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	b672      	cpsid	i
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	b662      	cpsie	i
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e7fe      	b.n	80058a8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d06a      	beq.n	8005986 <pvPortMalloc+0x14a>
 80058b0:	4b43      	ldr	r3, [pc, #268]	; (80059c0 <pvPortMalloc+0x184>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d865      	bhi.n	8005986 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058ba:	4b42      	ldr	r3, [pc, #264]	; (80059c4 <pvPortMalloc+0x188>)
 80058bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058be:	4b41      	ldr	r3, [pc, #260]	; (80059c4 <pvPortMalloc+0x188>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058c4:	e004      	b.n	80058d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d903      	bls.n	80058e2 <pvPortMalloc+0xa6>
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1f1      	bne.n	80058c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058e2:	4b35      	ldr	r3, [pc, #212]	; (80059b8 <pvPortMalloc+0x17c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d04c      	beq.n	8005986 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2208      	movs	r2, #8
 80058f2:	4413      	add	r3, r2
 80058f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	1ad2      	subs	r2, r2, r3
 8005906:	2308      	movs	r3, #8
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	429a      	cmp	r2, r3
 800590c:	d920      	bls.n	8005950 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4413      	add	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <pvPortMalloc+0xfc>
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	b672      	cpsid	i
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	b662      	cpsie	i
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	e7fe      	b.n	8005936 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800594a:	69b8      	ldr	r0, [r7, #24]
 800594c:	f000 f8fc 	bl	8005b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005950:	4b1b      	ldr	r3, [pc, #108]	; (80059c0 <pvPortMalloc+0x184>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <pvPortMalloc+0x184>)
 800595c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800595e:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <pvPortMalloc+0x184>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <pvPortMalloc+0x18c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d203      	bcs.n	8005972 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800596a:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <pvPortMalloc+0x184>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a16      	ldr	r2, [pc, #88]	; (80059c8 <pvPortMalloc+0x18c>)
 8005970:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	4b11      	ldr	r3, [pc, #68]	; (80059bc <pvPortMalloc+0x180>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	431a      	orrs	r2, r3
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005986:	f7fe fd55 	bl	8004434 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00b      	beq.n	80059ac <pvPortMalloc+0x170>
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	b672      	cpsid	i
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	b662      	cpsie	i
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	e7fe      	b.n	80059aa <pvPortMalloc+0x16e>
	return pvReturn;
 80059ac:	69fb      	ldr	r3, [r7, #28]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3728      	adds	r7, #40	; 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20004994 	.word	0x20004994
 80059bc:	200049a0 	.word	0x200049a0
 80059c0:	20004998 	.word	0x20004998
 80059c4:	2000498c 	.word	0x2000498c
 80059c8:	2000499c 	.word	0x2000499c

080059cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d04a      	beq.n	8005a74 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059de:	2308      	movs	r3, #8
 80059e0:	425b      	negs	r3, r3
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4413      	add	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <vPortFree+0xb0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <vPortFree+0x46>
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	b672      	cpsid	i
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	b662      	cpsie	i
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	e7fe      	b.n	8005a10 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <vPortFree+0x66>
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	b672      	cpsid	i
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	b662      	cpsie	i
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	e7fe      	b.n	8005a30 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	4b11      	ldr	r3, [pc, #68]	; (8005a7c <vPortFree+0xb0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d019      	beq.n	8005a74 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d115      	bne.n	8005a74 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <vPortFree+0xb0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	401a      	ands	r2, r3
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a58:	f7fe fcde 	bl	8004418 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <vPortFree+0xb4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4413      	add	r3, r2
 8005a66:	4a06      	ldr	r2, [pc, #24]	; (8005a80 <vPortFree+0xb4>)
 8005a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a6a:	6938      	ldr	r0, [r7, #16]
 8005a6c:	f000 f86c 	bl	8005b48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a70:	f7fe fce0 	bl	8004434 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a74:	bf00      	nop
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	200049a0 	.word	0x200049a0
 8005a80:	20004998 	.word	0x20004998

08005a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a90:	4b27      	ldr	r3, [pc, #156]	; (8005b30 <prvHeapInit+0xac>)
 8005a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00c      	beq.n	8005ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3307      	adds	r3, #7
 8005aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0307 	bic.w	r3, r3, #7
 8005aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <prvHeapInit+0xac>)
 8005ab4:	4413      	add	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005abc:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <prvHeapInit+0xb0>)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ac2:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <prvHeapInit+0xb0>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	4413      	add	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0307 	bic.w	r3, r3, #7
 8005ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <prvHeapInit+0xb4>)
 8005ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <prvHeapInit+0xb4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2200      	movs	r2, #0
 8005aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <prvHeapInit+0xb4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <prvHeapInit+0xb4>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <prvHeapInit+0xb8>)
 8005b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <prvHeapInit+0xbc>)
 8005b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <prvHeapInit+0xc0>)
 8005b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b22:	601a      	str	r2, [r3, #0]
}
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	20000d8c 	.word	0x20000d8c
 8005b34:	2000498c 	.word	0x2000498c
 8005b38:	20004994 	.word	0x20004994
 8005b3c:	2000499c 	.word	0x2000499c
 8005b40:	20004998 	.word	0x20004998
 8005b44:	200049a0 	.word	0x200049a0

08005b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b50:	4b28      	ldr	r3, [pc, #160]	; (8005bf4 <prvInsertBlockIntoFreeList+0xac>)
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	e002      	b.n	8005b5c <prvInsertBlockIntoFreeList+0x14>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d8f7      	bhi.n	8005b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4413      	add	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d108      	bne.n	8005b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	441a      	add	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	441a      	add	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d118      	bne.n	8005bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d00d      	beq.n	8005bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	441a      	add	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e008      	b.n	8005bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	e003      	b.n	8005bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d002      	beq.n	8005be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005be6:	bf00      	nop
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	2000498c 	.word	0x2000498c
 8005bf8:	20004994 	.word	0x20004994

08005bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	; 0x28
 8005c00:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c02:	f7fa fcf5 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c06:	f000 f82b 	bl	8005c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c0a:	f000 f967 	bl	8005edc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8005c0e:	f000 f935 	bl	8005e7c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8005c12:	f000 f8b7 	bl	8005d84 <MX_ADC1_Init>
  MX_DAC_Init();
 8005c16:	f000 f907 	bl	8005e28 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_BLUE);
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	f000 fbf8 	bl	8006410 <BSP_LED_Init>

  /* USER CODE END 2 */

  osKernelInitialize();
 8005c20:	f7fd fa50 	bl	80030c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8005c24:	1d3b      	adds	r3, r7, #4
 8005c26:	2224      	movs	r2, #36	; 0x24
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fd15 	bl	800665a <memset>
 8005c30:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <main+0x58>)
 8005c32:	607b      	str	r3, [r7, #4]
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	2318      	movs	r3, #24
 8005c3a:	61fb      	str	r3, [r7, #28]
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005c3c:	1d3b      	adds	r3, r7, #4
 8005c3e:	461a      	mov	r2, r3
 8005c40:	2100      	movs	r1, #0
 8005c42:	4805      	ldr	r0, [pc, #20]	; (8005c58 <main+0x5c>)
 8005c44:	f7fd faa6 	bl	8003194 <osThreadNew>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <main+0x60>)
 8005c4c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005c4e:	f7fd fa6d 	bl	800312c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005c52:	e7fe      	b.n	8005c52 <main+0x56>
 8005c54:	08006e94 	.word	0x08006e94
 8005c58:	080060e5 	.word	0x080060e5
 8005c5c:	20004af4 	.word	0x20004af4

08005c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b0b8      	sub	sp, #224	; 0xe0
 8005c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005c6a:	2234      	movs	r2, #52	; 0x34
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fcf3 	bl	800665a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	605a      	str	r2, [r3, #4]
 8005c7e:	609a      	str	r2, [r3, #8]
 8005c80:	60da      	str	r2, [r3, #12]
 8005c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c84:	f107 0308 	add.w	r3, r7, #8
 8005c88:	2290      	movs	r2, #144	; 0x90
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fce4 	bl	800665a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8005c92:	f7fb fc8d 	bl	80015b0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c96:	4b39      	ldr	r3, [pc, #228]	; (8005d7c <SystemClock_Config+0x11c>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	4a38      	ldr	r2, [pc, #224]	; (8005d7c <SystemClock_Config+0x11c>)
 8005c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ca2:	4b36      	ldr	r3, [pc, #216]	; (8005d7c <SystemClock_Config+0x11c>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005caa:	607b      	str	r3, [r7, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005cae:	4b34      	ldr	r3, [pc, #208]	; (8005d80 <SystemClock_Config+0x120>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005cb6:	4a32      	ldr	r2, [pc, #200]	; (8005d80 <SystemClock_Config+0x120>)
 8005cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4b30      	ldr	r3, [pc, #192]	; (8005d80 <SystemClock_Config+0x120>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005cd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005cde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005ce6:	2304      	movs	r3, #4
 8005ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005cec:	2360      	movs	r3, #96	; 0x60
 8005cee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005cfe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fb fcb4 	bl	8001670 <HAL_RCC_OscConfig>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8005d0e:	f000 fa63 	bl	80061d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005d12:	f7fb fc5d 	bl	80015d0 <HAL_PWREx_EnableOverDrive>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005d1c:	f000 fa5c 	bl	80061d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d20:	230f      	movs	r3, #15
 8005d22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d26:	2302      	movs	r3, #2
 8005d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005d40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005d44:	2103      	movs	r1, #3
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fb ff04 	bl	8001b54 <HAL_RCC_ClockConfig>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8005d52:	f000 fa41 	bl	80061d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d5a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d60:	f107 0308 	add.w	r3, r7, #8
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fc f8e9 	bl	8001f3c <HAL_RCCEx_PeriphCLKConfig>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8005d70:	f000 fa32 	bl	80061d8 <Error_Handler>
  }
}
 8005d74:	bf00      	nop
 8005d76:	37e0      	adds	r7, #224	; 0xe0
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	40007000 	.word	0x40007000

08005d84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005d8a:	463b      	mov	r3, r7
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	605a      	str	r2, [r3, #4]
 8005d92:	609a      	str	r2, [r3, #8]
 8005d94:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8005d96:	4b21      	ldr	r3, [pc, #132]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005d98:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <MX_ADC1_Init+0x9c>)
 8005d9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005d9c:	4b1f      	ldr	r3, [pc, #124]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005d9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005da2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005da4:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005daa:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005db0:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005db6:	4b19      	ldr	r3, [pc, #100]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005dbe:	4b17      	ldr	r3, [pc, #92]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005dc4:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005dc6:	4a17      	ldr	r2, [pc, #92]	; (8005e24 <MX_ADC1_Init+0xa0>)
 8005dc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005dd0:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005dd6:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005dde:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005de4:	480d      	ldr	r0, [pc, #52]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005de6:	f7fa fc61 	bl	80006ac <HAL_ADC_Init>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005df0:	f000 f9f2 	bl	80061d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005df4:	2306      	movs	r3, #6
 8005df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e00:	463b      	mov	r3, r7
 8005e02:	4619      	mov	r1, r3
 8005e04:	4805      	ldr	r0, [pc, #20]	; (8005e1c <MX_ADC1_Init+0x98>)
 8005e06:	f7fa fde7 	bl	80009d8 <HAL_ADC_ConfigChannel>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005e10:	f000 f9e2 	bl	80061d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20004b78 	.word	0x20004b78
 8005e20:	40012000 	.word	0x40012000
 8005e24:	0f000001 	.word	0x0f000001

08005e28 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005e2e:	463b      	mov	r3, r7
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8005e36:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <MX_DAC_Init+0x4c>)
 8005e38:	4a0f      	ldr	r2, [pc, #60]	; (8005e78 <MX_DAC_Init+0x50>)
 8005e3a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8005e3c:	480d      	ldr	r0, [pc, #52]	; (8005e74 <MX_DAC_Init+0x4c>)
 8005e3e:	f7fb f8de 	bl	8000ffe <HAL_DAC_Init>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8005e48:	f000 f9c6 	bl	80061d8 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005e50:	2300      	movs	r3, #0
 8005e52:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005e54:	463b      	mov	r3, r7
 8005e56:	2210      	movs	r2, #16
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4806      	ldr	r0, [pc, #24]	; (8005e74 <MX_DAC_Init+0x4c>)
 8005e5c:	f7fb f957 	bl	800110e <HAL_DAC_ConfigChannel>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8005e66:	f000 f9b7 	bl	80061d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8005e6a:	bf00      	nop
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20004bc0 	.word	0x20004bc0
 8005e78:	40007400 	.word	0x40007400

08005e7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005e80:	4b14      	ldr	r3, [pc, #80]	; (8005ed4 <MX_USART3_UART_Init+0x58>)
 8005e82:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <MX_USART3_UART_Init+0x5c>)
 8005e84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005e86:	4b13      	ldr	r3, [pc, #76]	; (8005ed4 <MX_USART3_UART_Init+0x58>)
 8005e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <MX_USART3_UART_Init+0x58>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <MX_USART3_UART_Init+0x58>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <MX_USART3_UART_Init+0x58>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <MX_USART3_UART_Init+0x58>)
 8005ea2:	220c      	movs	r2, #12
 8005ea4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <MX_USART3_UART_Init+0x58>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <MX_USART3_UART_Init+0x58>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <MX_USART3_UART_Init+0x58>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005eb8:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <MX_USART3_UART_Init+0x58>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005ebe:	4805      	ldr	r0, [pc, #20]	; (8005ed4 <MX_USART3_UART_Init+0x58>)
 8005ec0:	f7fc fc62 	bl	8002788 <HAL_UART_Init>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005eca:	f000 f985 	bl	80061d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005ece:	bf00      	nop
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20004af8 	.word	0x20004af8
 8005ed8:	40004800 	.word	0x40004800

08005edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08c      	sub	sp, #48	; 0x30
 8005ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee2:	f107 031c 	add.w	r3, r7, #28
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	605a      	str	r2, [r3, #4]
 8005eec:	609a      	str	r2, [r3, #8]
 8005eee:	60da      	str	r2, [r3, #12]
 8005ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ef2:	4b76      	ldr	r3, [pc, #472]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	4a75      	ldr	r2, [pc, #468]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005ef8:	f043 0304 	orr.w	r3, r3, #4
 8005efc:	6313      	str	r3, [r2, #48]	; 0x30
 8005efe:	4b73      	ldr	r3, [pc, #460]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	61bb      	str	r3, [r7, #24]
 8005f08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f0a:	4b70      	ldr	r3, [pc, #448]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	4a6f      	ldr	r2, [pc, #444]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f14:	6313      	str	r3, [r2, #48]	; 0x30
 8005f16:	4b6d      	ldr	r3, [pc, #436]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f22:	4b6a      	ldr	r3, [pc, #424]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f26:	4a69      	ldr	r2, [pc, #420]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f2e:	4b67      	ldr	r3, [pc, #412]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f3a:	4b64      	ldr	r3, [pc, #400]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	4a63      	ldr	r2, [pc, #396]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f40:	f043 0302 	orr.w	r3, r3, #2
 8005f44:	6313      	str	r3, [r2, #48]	; 0x30
 8005f46:	4b61      	ldr	r3, [pc, #388]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f52:	4b5e      	ldr	r3, [pc, #376]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	4a5d      	ldr	r2, [pc, #372]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f58:	f043 0308 	orr.w	r3, r3, #8
 8005f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5e:	4b5b      	ldr	r3, [pc, #364]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	60bb      	str	r3, [r7, #8]
 8005f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005f6a:	4b58      	ldr	r3, [pc, #352]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	4a57      	ldr	r2, [pc, #348]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f74:	6313      	str	r3, [r2, #48]	; 0x30
 8005f76:	4b55      	ldr	r3, [pc, #340]	; (80060cc <MX_GPIO_Init+0x1f0>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	607b      	str	r3, [r7, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005f82:	2200      	movs	r2, #0
 8005f84:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8005f88:	4851      	ldr	r0, [pc, #324]	; (80060d0 <MX_GPIO_Init+0x1f4>)
 8005f8a:	f7fb fadd 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2140      	movs	r1, #64	; 0x40
 8005f92:	4850      	ldr	r0, [pc, #320]	; (80060d4 <MX_GPIO_Init+0x1f8>)
 8005f94:	f7fb fad8 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005f9e:	4b4e      	ldr	r3, [pc, #312]	; (80060d8 <MX_GPIO_Init+0x1fc>)
 8005fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005fa6:	f107 031c 	add.w	r3, r7, #28
 8005faa:	4619      	mov	r1, r3
 8005fac:	484b      	ldr	r0, [pc, #300]	; (80060dc <MX_GPIO_Init+0x200>)
 8005fae:	f7fb f921 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005fb2:	2332      	movs	r3, #50	; 0x32
 8005fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fc2:	230b      	movs	r3, #11
 8005fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fc6:	f107 031c 	add.w	r3, r7, #28
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4843      	ldr	r0, [pc, #268]	; (80060dc <MX_GPIO_Init+0x200>)
 8005fce:	f7fb f911 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005fd2:	2386      	movs	r3, #134	; 0x86
 8005fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fe2:	230b      	movs	r3, #11
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fe6:	f107 031c 	add.w	r3, r7, #28
 8005fea:	4619      	mov	r1, r3
 8005fec:	483c      	ldr	r0, [pc, #240]	; (80060e0 <MX_GPIO_Init+0x204>)
 8005fee:	f7fb f901 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006000:	2303      	movs	r3, #3
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006004:	230b      	movs	r3, #11
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006008:	f107 031c 	add.w	r3, r7, #28
 800600c:	4619      	mov	r1, r3
 800600e:	4830      	ldr	r0, [pc, #192]	; (80060d0 <MX_GPIO_Init+0x1f4>)
 8006010:	f7fb f8f0 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8006014:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8006018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800601a:	2301      	movs	r3, #1
 800601c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800601e:	2300      	movs	r3, #0
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006022:	2300      	movs	r3, #0
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006026:	f107 031c 	add.w	r3, r7, #28
 800602a:	4619      	mov	r1, r3
 800602c:	4828      	ldr	r0, [pc, #160]	; (80060d0 <MX_GPIO_Init+0x1f4>)
 800602e:	f7fb f8e1 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006032:	2340      	movs	r3, #64	; 0x40
 8006034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006036:	2301      	movs	r3, #1
 8006038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800603a:	2300      	movs	r3, #0
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800603e:	2300      	movs	r3, #0
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006042:	f107 031c 	add.w	r3, r7, #28
 8006046:	4619      	mov	r1, r3
 8006048:	4822      	ldr	r0, [pc, #136]	; (80060d4 <MX_GPIO_Init+0x1f8>)
 800604a:	f7fb f8d3 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800604e:	2380      	movs	r3, #128	; 0x80
 8006050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006052:	2300      	movs	r3, #0
 8006054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006056:	2300      	movs	r3, #0
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800605a:	f107 031c 	add.w	r3, r7, #28
 800605e:	4619      	mov	r1, r3
 8006060:	481c      	ldr	r0, [pc, #112]	; (80060d4 <MX_GPIO_Init+0x1f8>)
 8006062:	f7fb f8c7 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006066:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800606a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800606c:	2302      	movs	r3, #2
 800606e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006070:	2300      	movs	r3, #0
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006074:	2303      	movs	r3, #3
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006078:	230a      	movs	r3, #10
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800607c:	f107 031c 	add.w	r3, r7, #28
 8006080:	4619      	mov	r1, r3
 8006082:	4817      	ldr	r0, [pc, #92]	; (80060e0 <MX_GPIO_Init+0x204>)
 8006084:	f7fb f8b6 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800608c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800608e:	2300      	movs	r3, #0
 8006090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006092:	2300      	movs	r3, #0
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006096:	f107 031c 	add.w	r3, r7, #28
 800609a:	4619      	mov	r1, r3
 800609c:	4810      	ldr	r0, [pc, #64]	; (80060e0 <MX_GPIO_Init+0x204>)
 800609e:	f7fb f8a9 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80060a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80060a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a8:	2302      	movs	r3, #2
 80060aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060b0:	2303      	movs	r3, #3
 80060b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060b4:	230b      	movs	r3, #11
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80060b8:	f107 031c 	add.w	r3, r7, #28
 80060bc:	4619      	mov	r1, r3
 80060be:	4805      	ldr	r0, [pc, #20]	; (80060d4 <MX_GPIO_Init+0x1f8>)
 80060c0:	f7fb f898 	bl	80011f4 <HAL_GPIO_Init>

}
 80060c4:	bf00      	nop
 80060c6:	3730      	adds	r7, #48	; 0x30
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40020400 	.word	0x40020400
 80060d4:	40021800 	.word	0x40021800
 80060d8:	10110000 	.word	0x10110000
 80060dc:	40020800 	.word	0x40020800
 80060e0:	40020000 	.word	0x40020000

080060e4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08e      	sub	sp, #56	; 0x38
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
    
    

  /* USER CODE BEGIN 5 */

    uint32_t count = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t ADCValue;
    TickType_t xLastWakeTime;
    TickType_t h_ms = 1 / portTICK_RATE_MS;
 80060f0:	2301      	movs	r3, #1
 80060f2:	62bb      	str	r3, [r7, #40]	; 0x28

    HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80060f4:	2300      	movs	r3, #0
 80060f6:	2200      	movs	r2, #0
 80060f8:	2110      	movs	r1, #16
 80060fa:	4831      	ldr	r0, [pc, #196]	; (80061c0 <StartDefaultTask+0xdc>)
 80060fc:	f7fb f854 	bl	80011a8 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8006100:	2110      	movs	r1, #16
 8006102:	482f      	ldr	r0, [pc, #188]	; (80061c0 <StartDefaultTask+0xdc>)
 8006104:	f7fa ff9d 	bl	8001042 <HAL_DAC_Start>

	vTaskDelay(1000 / portTICK_RATE_MS);
 8006108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800610c:	f7fe f8e6 	bl	80042dc <vTaskDelay>
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, 2048);
 8006110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006114:	2200      	movs	r2, #0
 8006116:	2110      	movs	r1, #16
 8006118:	4829      	ldr	r0, [pc, #164]	; (80061c0 <StartDefaultTask+0xdc>)
 800611a:	f7fb f845 	bl	80011a8 <HAL_DAC_SetValue>

	xLastWakeTime = xTaskGetTickCount();
 800611e:	f7fe fa27 	bl	8004570 <xTaskGetTickCount>
 8006122:	4603      	mov	r3, r0
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {

		vTaskDelayUntil(&xLastWakeTime, h_ms);
 8006126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800612a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800612c:	4618      	mov	r0, r3
 800612e:	f7fe f855 	bl	80041dc <vTaskDelayUntil>

		HAL_ADC_Start(&hadc1);
 8006132:	4824      	ldr	r0, [pc, #144]	; (80061c4 <StartDefaultTask+0xe0>)
 8006134:	f7fa fafe 	bl	8000734 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK) {
 8006138:	4923      	ldr	r1, [pc, #140]	; (80061c8 <StartDefaultTask+0xe4>)
 800613a:	4822      	ldr	r0, [pc, #136]	; (80061c4 <StartDefaultTask+0xe0>)
 800613c:	f7fa fbba 	bl	80008b4 <HAL_ADC_PollForConversion>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d103      	bne.n	800614e <StartDefaultTask+0x6a>
			ADCValue = HAL_ADC_GetValue(&hadc1);
 8006146:	481f      	ldr	r0, [pc, #124]	; (80061c4 <StartDefaultTask+0xe0>)
 8006148:	f7fa fc38 	bl	80009bc <HAL_ADC_GetValue>
 800614c:	6338      	str	r0, [r7, #48]	; 0x30
		}
		if (count < DATA_BUFFER_LEN) {
 800614e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006150:	2b3f      	cmp	r3, #63	; 0x3f
 8006152:	d808      	bhi.n	8006166 <StartDefaultTask+0x82>
			dataBuffer[count] = ADCValue;
 8006154:	491d      	ldr	r1, [pc, #116]	; (80061cc <StartDefaultTask+0xe8>)
 8006156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			count++;
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	3301      	adds	r3, #1
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
 8006164:	e7df      	b.n	8006126 <StartDefaultTask+0x42>
		} else {
			BSP_LED_Toggle(LED_BLUE);
 8006166:	2001      	movs	r0, #1
 8006168:	f000 f99e 	bl	80064a8 <BSP_LED_Toggle>
			uint8_t msg[] = "%d,\n";
 800616c:	4a18      	ldr	r2, [pc, #96]	; (80061d0 <StartDefaultTask+0xec>)
 800616e:	f107 031c 	add.w	r3, r7, #28
 8006172:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006176:	6018      	str	r0, [r3, #0]
 8006178:	3304      	adds	r3, #4
 800617a:	7019      	strb	r1, [r3, #0]
			uint8_t buffer[16];
			for (int i = 0; i < DATA_BUFFER_LEN; ++i) {
 800617c:	2300      	movs	r3, #0
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006180:	e01a      	b.n	80061b8 <StartDefaultTask+0xd4>
				sprintf(buffer, msg, dataBuffer[i]);
 8006182:	4a12      	ldr	r2, [pc, #72]	; (80061cc <StartDefaultTask+0xe8>)
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800618a:	f107 011c 	add.w	r1, r7, #28
 800618e:	f107 030c 	add.w	r3, r7, #12
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fa6a 	bl	800666c <siprintf>
				HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 8006198:	f107 030c 	add.w	r3, r7, #12
 800619c:	4618      	mov	r0, r3
 800619e:	f7fa f84f 	bl	8000240 <strlen>
 80061a2:	4603      	mov	r3, r0
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	f107 010c 	add.w	r1, r7, #12
 80061aa:	2364      	movs	r3, #100	; 0x64
 80061ac:	4809      	ldr	r0, [pc, #36]	; (80061d4 <StartDefaultTask+0xf0>)
 80061ae:	f7fc fb39 	bl	8002824 <HAL_UART_Transmit>
			for (int i = 0; i < DATA_BUFFER_LEN; ++i) {
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	3301      	adds	r3, #1
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	2b3f      	cmp	r3, #63	; 0x3f
 80061bc:	dde1      	ble.n	8006182 <StartDefaultTask+0x9e>
			}
			while (1)
 80061be:	e7fe      	b.n	80061be <StartDefaultTask+0xda>
 80061c0:	20004bc0 	.word	0x20004bc0
 80061c4:	20004b78 	.word	0x20004b78
 80061c8:	000f4240 	.word	0x000f4240
 80061cc:	200049a4 	.word	0x200049a4
 80061d0:	08006ea0 	.word	0x08006ea0
 80061d4:	20004af8 	.word	0x20004af8

080061d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80061dc:	bf00      	nop
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80061ee:	4b11      	ldr	r3, [pc, #68]	; (8006234 <HAL_MspInit+0x4c>)
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	4a10      	ldr	r2, [pc, #64]	; (8006234 <HAL_MspInit+0x4c>)
 80061f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f8:	6413      	str	r3, [r2, #64]	; 0x40
 80061fa:	4b0e      	ldr	r3, [pc, #56]	; (8006234 <HAL_MspInit+0x4c>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006202:	607b      	str	r3, [r7, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006206:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <HAL_MspInit+0x4c>)
 8006208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620a:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <HAL_MspInit+0x4c>)
 800620c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006210:	6453      	str	r3, [r2, #68]	; 0x44
 8006212:	4b08      	ldr	r3, [pc, #32]	; (8006234 <HAL_MspInit+0x4c>)
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800621e:	2200      	movs	r2, #0
 8006220:	210f      	movs	r1, #15
 8006222:	f06f 0001 	mvn.w	r0, #1
 8006226:	f7fa fec2 	bl	8000fae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40023800 	.word	0x40023800

08006238 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006240:	f107 0314 	add.w	r3, r7, #20
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	605a      	str	r2, [r3, #4]
 800624a:	609a      	str	r2, [r3, #8]
 800624c:	60da      	str	r2, [r3, #12]
 800624e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a15      	ldr	r2, [pc, #84]	; (80062ac <HAL_ADC_MspInit+0x74>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d123      	bne.n	80062a2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800625a:	4b15      	ldr	r3, [pc, #84]	; (80062b0 <HAL_ADC_MspInit+0x78>)
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	4a14      	ldr	r2, [pc, #80]	; (80062b0 <HAL_ADC_MspInit+0x78>)
 8006260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006264:	6453      	str	r3, [r2, #68]	; 0x44
 8006266:	4b12      	ldr	r3, [pc, #72]	; (80062b0 <HAL_ADC_MspInit+0x78>)
 8006268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006272:	4b0f      	ldr	r3, [pc, #60]	; (80062b0 <HAL_ADC_MspInit+0x78>)
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	4a0e      	ldr	r2, [pc, #56]	; (80062b0 <HAL_ADC_MspInit+0x78>)
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	6313      	str	r3, [r2, #48]	; 0x30
 800627e:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <HAL_ADC_MspInit+0x78>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800628a:	2340      	movs	r3, #64	; 0x40
 800628c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800628e:	2303      	movs	r3, #3
 8006290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006292:	2300      	movs	r3, #0
 8006294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006296:	f107 0314 	add.w	r3, r7, #20
 800629a:	4619      	mov	r1, r3
 800629c:	4805      	ldr	r0, [pc, #20]	; (80062b4 <HAL_ADC_MspInit+0x7c>)
 800629e:	f7fa ffa9 	bl	80011f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80062a2:	bf00      	nop
 80062a4:	3728      	adds	r7, #40	; 0x28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40012000 	.word	0x40012000
 80062b0:	40023800 	.word	0x40023800
 80062b4:	40020000 	.word	0x40020000

080062b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08a      	sub	sp, #40	; 0x28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062c0:	f107 0314 	add.w	r3, r7, #20
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	605a      	str	r2, [r3, #4]
 80062ca:	609a      	str	r2, [r3, #8]
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a15      	ldr	r2, [pc, #84]	; (800632c <HAL_DAC_MspInit+0x74>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d123      	bne.n	8006322 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80062da:	4b15      	ldr	r3, [pc, #84]	; (8006330 <HAL_DAC_MspInit+0x78>)
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	4a14      	ldr	r2, [pc, #80]	; (8006330 <HAL_DAC_MspInit+0x78>)
 80062e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062e4:	6413      	str	r3, [r2, #64]	; 0x40
 80062e6:	4b12      	ldr	r3, [pc, #72]	; (8006330 <HAL_DAC_MspInit+0x78>)
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062f2:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <HAL_DAC_MspInit+0x78>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	4a0e      	ldr	r2, [pc, #56]	; (8006330 <HAL_DAC_MspInit+0x78>)
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	6313      	str	r3, [r2, #48]	; 0x30
 80062fe:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <HAL_DAC_MspInit+0x78>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800630a:	2320      	movs	r3, #32
 800630c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800630e:	2303      	movs	r3, #3
 8006310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006312:	2300      	movs	r3, #0
 8006314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006316:	f107 0314 	add.w	r3, r7, #20
 800631a:	4619      	mov	r1, r3
 800631c:	4805      	ldr	r0, [pc, #20]	; (8006334 <HAL_DAC_MspInit+0x7c>)
 800631e:	f7fa ff69 	bl	80011f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8006322:	bf00      	nop
 8006324:	3728      	adds	r7, #40	; 0x28
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40007400 	.word	0x40007400
 8006330:	40023800 	.word	0x40023800
 8006334:	40020000 	.word	0x40020000

08006338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	; 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	605a      	str	r2, [r3, #4]
 800634a:	609a      	str	r2, [r3, #8]
 800634c:	60da      	str	r2, [r3, #12]
 800634e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a17      	ldr	r2, [pc, #92]	; (80063b4 <HAL_UART_MspInit+0x7c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d128      	bne.n	80063ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800635a:	4b17      	ldr	r3, [pc, #92]	; (80063b8 <HAL_UART_MspInit+0x80>)
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	4a16      	ldr	r2, [pc, #88]	; (80063b8 <HAL_UART_MspInit+0x80>)
 8006360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006364:	6413      	str	r3, [r2, #64]	; 0x40
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <HAL_UART_MspInit+0x80>)
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006372:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <HAL_UART_MspInit+0x80>)
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	4a10      	ldr	r2, [pc, #64]	; (80063b8 <HAL_UART_MspInit+0x80>)
 8006378:	f043 0308 	orr.w	r3, r3, #8
 800637c:	6313      	str	r3, [r2, #48]	; 0x30
 800637e:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <HAL_UART_MspInit+0x80>)
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800638a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800638e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006390:	2302      	movs	r3, #2
 8006392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006394:	2300      	movs	r3, #0
 8006396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006398:	2303      	movs	r3, #3
 800639a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800639c:	2307      	movs	r3, #7
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063a0:	f107 0314 	add.w	r3, r7, #20
 80063a4:	4619      	mov	r1, r3
 80063a6:	4805      	ldr	r0, [pc, #20]	; (80063bc <HAL_UART_MspInit+0x84>)
 80063a8:	f7fa ff24 	bl	80011f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80063ac:	bf00      	nop
 80063ae:	3728      	adds	r7, #40	; 0x28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40004800 	.word	0x40004800
 80063b8:	40023800 	.word	0x40023800
 80063bc:	40020c00 	.word	0x40020c00

080063c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80063c4:	bf00      	nop
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063ce:	b480      	push	{r7}
 80063d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063d2:	e7fe      	b.n	80063d2 <HardFault_Handler+0x4>

080063d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063d8:	e7fe      	b.n	80063d8 <MemManage_Handler+0x4>

080063da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063da:	b480      	push	{r7}
 80063dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063de:	e7fe      	b.n	80063de <BusFault_Handler+0x4>

080063e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063e4:	e7fe      	b.n	80063e4 <UsageFault_Handler+0x4>

080063e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063e6:	b480      	push	{r7}
 80063e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063ea:	bf00      	nop
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063f8:	f7fa f938 	bl	800066c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80063fc:	f7fe fbfc 	bl	8004bf8 <xTaskGetSchedulerState>
 8006400:	4603      	mov	r3, r0
 8006402:	2b01      	cmp	r3, #1
 8006404:	d001      	beq.n	800640a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006406:	f7ff f987 	bl	8005718 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800640a:	bf00      	nop
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08a      	sub	sp, #40	; 0x28
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10c      	bne.n	800643a <BSP_LED_Init+0x2a>
 8006420:	4b1e      	ldr	r3, [pc, #120]	; (800649c <BSP_LED_Init+0x8c>)
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	4a1d      	ldr	r2, [pc, #116]	; (800649c <BSP_LED_Init+0x8c>)
 8006426:	f043 0302 	orr.w	r3, r3, #2
 800642a:	6313      	str	r3, [r2, #48]	; 0x30
 800642c:	4b1b      	ldr	r3, [pc, #108]	; (800649c <BSP_LED_Init+0x8c>)
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	e00b      	b.n	8006452 <BSP_LED_Init+0x42>
 800643a:	4b18      	ldr	r3, [pc, #96]	; (800649c <BSP_LED_Init+0x8c>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	4a17      	ldr	r2, [pc, #92]	; (800649c <BSP_LED_Init+0x8c>)
 8006440:	f043 0302 	orr.w	r3, r3, #2
 8006444:	6313      	str	r3, [r2, #48]	; 0x30
 8006446:	4b15      	ldr	r3, [pc, #84]	; (800649c <BSP_LED_Init+0x8c>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	4a12      	ldr	r2, [pc, #72]	; (80064a0 <BSP_LED_Init+0x90>)
 8006456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800645a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800645c:	2301      	movs	r3, #1
 800645e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006460:	2300      	movs	r3, #0
 8006462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006464:	2303      	movs	r3, #3
 8006466:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	4a0e      	ldr	r2, [pc, #56]	; (80064a4 <BSP_LED_Init+0x94>)
 800646c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006470:	f107 0214 	add.w	r2, r7, #20
 8006474:	4611      	mov	r1, r2
 8006476:	4618      	mov	r0, r3
 8006478:	f7fa febc 	bl	80011f4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <BSP_LED_Init+0x94>)
 8006480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	4a06      	ldr	r2, [pc, #24]	; (80064a0 <BSP_LED_Init+0x90>)
 8006488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800648c:	2200      	movs	r2, #0
 800648e:	4619      	mov	r1, r3
 8006490:	f7fb f85a 	bl	8001548 <HAL_GPIO_WritePin>
}
 8006494:	bf00      	nop
 8006496:	3728      	adds	r7, #40	; 0x28
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	40023800 	.word	0x40023800
 80064a0:	08006ea8 	.word	0x08006ea8
 80064a4:	2000000c 	.word	0x2000000c

080064a8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3 
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	4a06      	ldr	r2, [pc, #24]	; (80064d0 <BSP_LED_Toggle+0x28>)
 80064b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	4a05      	ldr	r2, [pc, #20]	; (80064d4 <BSP_LED_Toggle+0x2c>)
 80064be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064c2:	4619      	mov	r1, r3
 80064c4:	f7fb f859 	bl	800157a <HAL_GPIO_TogglePin>
}
 80064c8:	bf00      	nop
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	2000000c 	.word	0x2000000c
 80064d4:	08006ea8 	.word	0x08006ea8

080064d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80064e0:	4b11      	ldr	r3, [pc, #68]	; (8006528 <_sbrk+0x50>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d102      	bne.n	80064ee <_sbrk+0x16>
		heap_end = &end;
 80064e8:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <_sbrk+0x50>)
 80064ea:	4a10      	ldr	r2, [pc, #64]	; (800652c <_sbrk+0x54>)
 80064ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80064ee:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <_sbrk+0x50>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80064f4:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <_sbrk+0x50>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4413      	add	r3, r2
 80064fc:	466a      	mov	r2, sp
 80064fe:	4293      	cmp	r3, r2
 8006500:	d907      	bls.n	8006512 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006502:	f000 f875 	bl	80065f0 <__errno>
 8006506:	4602      	mov	r2, r0
 8006508:	230c      	movs	r3, #12
 800650a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800650c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006510:	e006      	b.n	8006520 <_sbrk+0x48>
	}

	heap_end += incr;
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <_sbrk+0x50>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4413      	add	r3, r2
 800651a:	4a03      	ldr	r2, [pc, #12]	; (8006528 <_sbrk+0x50>)
 800651c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800651e:	68fb      	ldr	r3, [r7, #12]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20004aa4 	.word	0x20004aa4
 800652c:	20004bd8 	.word	0x20004bd8

08006530 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <SystemInit+0x5c>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653a:	4a14      	ldr	r2, [pc, #80]	; (800658c <SystemInit+0x5c>)
 800653c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006544:	4b12      	ldr	r3, [pc, #72]	; (8006590 <SystemInit+0x60>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a11      	ldr	r2, [pc, #68]	; (8006590 <SystemInit+0x60>)
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006550:	4b0f      	ldr	r3, [pc, #60]	; (8006590 <SystemInit+0x60>)
 8006552:	2200      	movs	r2, #0
 8006554:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006556:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <SystemInit+0x60>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	490d      	ldr	r1, [pc, #52]	; (8006590 <SystemInit+0x60>)
 800655c:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <SystemInit+0x64>)
 800655e:	4013      	ands	r3, r2
 8006560:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <SystemInit+0x60>)
 8006564:	4a0c      	ldr	r2, [pc, #48]	; (8006598 <SystemInit+0x68>)
 8006566:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006568:	4b09      	ldr	r3, [pc, #36]	; (8006590 <SystemInit+0x60>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a08      	ldr	r2, [pc, #32]	; (8006590 <SystemInit+0x60>)
 800656e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006572:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006574:	4b06      	ldr	r3, [pc, #24]	; (8006590 <SystemInit+0x60>)
 8006576:	2200      	movs	r2, #0
 8006578:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800657a:	4b04      	ldr	r3, [pc, #16]	; (800658c <SystemInit+0x5c>)
 800657c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006580:	609a      	str	r2, [r3, #8]
#endif
}
 8006582:	bf00      	nop
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	e000ed00 	.word	0xe000ed00
 8006590:	40023800 	.word	0x40023800
 8006594:	fef6ffff 	.word	0xfef6ffff
 8006598:	24003010 	.word	0x24003010

0800659c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800659c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80065a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80065a2:	e003      	b.n	80065ac <LoopCopyDataInit>

080065a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80065a4:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80065a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80065a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80065aa:	3104      	adds	r1, #4

080065ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80065ac:	480b      	ldr	r0, [pc, #44]	; (80065dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80065b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80065b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80065b4:	d3f6      	bcc.n	80065a4 <CopyDataInit>
  ldr  r2, =_sbss
 80065b6:	4a0b      	ldr	r2, [pc, #44]	; (80065e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80065b8:	e002      	b.n	80065c0 <LoopFillZerobss>

080065ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80065ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80065bc:	f842 3b04 	str.w	r3, [r2], #4

080065c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80065c0:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80065c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80065c4:	d3f9      	bcc.n	80065ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80065c6:	f7ff ffb3 	bl	8006530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065ca:	f000 f817 	bl	80065fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065ce:	f7ff fb15 	bl	8005bfc <main>
  bx  lr    
 80065d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80065d4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80065d8:	08006f0c 	.word	0x08006f0c
  ldr  r0, =_sdata
 80065dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80065e0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80065e4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80065e8:	20004bd8 	.word	0x20004bd8

080065ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065ec:	e7fe      	b.n	80065ec <ADC_IRQHandler>
	...

080065f0 <__errno>:
 80065f0:	4b01      	ldr	r3, [pc, #4]	; (80065f8 <__errno+0x8>)
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	2000001c 	.word	0x2000001c

080065fc <__libc_init_array>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	4e0d      	ldr	r6, [pc, #52]	; (8006634 <__libc_init_array+0x38>)
 8006600:	4c0d      	ldr	r4, [pc, #52]	; (8006638 <__libc_init_array+0x3c>)
 8006602:	1ba4      	subs	r4, r4, r6
 8006604:	10a4      	asrs	r4, r4, #2
 8006606:	2500      	movs	r5, #0
 8006608:	42a5      	cmp	r5, r4
 800660a:	d109      	bne.n	8006620 <__libc_init_array+0x24>
 800660c:	4e0b      	ldr	r6, [pc, #44]	; (800663c <__libc_init_array+0x40>)
 800660e:	4c0c      	ldr	r4, [pc, #48]	; (8006640 <__libc_init_array+0x44>)
 8006610:	f000 fc28 	bl	8006e64 <_init>
 8006614:	1ba4      	subs	r4, r4, r6
 8006616:	10a4      	asrs	r4, r4, #2
 8006618:	2500      	movs	r5, #0
 800661a:	42a5      	cmp	r5, r4
 800661c:	d105      	bne.n	800662a <__libc_init_array+0x2e>
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006624:	4798      	blx	r3
 8006626:	3501      	adds	r5, #1
 8006628:	e7ee      	b.n	8006608 <__libc_init_array+0xc>
 800662a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800662e:	4798      	blx	r3
 8006630:	3501      	adds	r5, #1
 8006632:	e7f2      	b.n	800661a <__libc_init_array+0x1e>
 8006634:	08006f04 	.word	0x08006f04
 8006638:	08006f04 	.word	0x08006f04
 800663c:	08006f04 	.word	0x08006f04
 8006640:	08006f08 	.word	0x08006f08

08006644 <memcpy>:
 8006644:	b510      	push	{r4, lr}
 8006646:	1e43      	subs	r3, r0, #1
 8006648:	440a      	add	r2, r1
 800664a:	4291      	cmp	r1, r2
 800664c:	d100      	bne.n	8006650 <memcpy+0xc>
 800664e:	bd10      	pop	{r4, pc}
 8006650:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006654:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006658:	e7f7      	b.n	800664a <memcpy+0x6>

0800665a <memset>:
 800665a:	4402      	add	r2, r0
 800665c:	4603      	mov	r3, r0
 800665e:	4293      	cmp	r3, r2
 8006660:	d100      	bne.n	8006664 <memset+0xa>
 8006662:	4770      	bx	lr
 8006664:	f803 1b01 	strb.w	r1, [r3], #1
 8006668:	e7f9      	b.n	800665e <memset+0x4>
	...

0800666c <siprintf>:
 800666c:	b40e      	push	{r1, r2, r3}
 800666e:	b500      	push	{lr}
 8006670:	b09c      	sub	sp, #112	; 0x70
 8006672:	ab1d      	add	r3, sp, #116	; 0x74
 8006674:	9002      	str	r0, [sp, #8]
 8006676:	9006      	str	r0, [sp, #24]
 8006678:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800667c:	4809      	ldr	r0, [pc, #36]	; (80066a4 <siprintf+0x38>)
 800667e:	9107      	str	r1, [sp, #28]
 8006680:	9104      	str	r1, [sp, #16]
 8006682:	4909      	ldr	r1, [pc, #36]	; (80066a8 <siprintf+0x3c>)
 8006684:	f853 2b04 	ldr.w	r2, [r3], #4
 8006688:	9105      	str	r1, [sp, #20]
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	a902      	add	r1, sp, #8
 8006690:	f000 f866 	bl	8006760 <_svfiprintf_r>
 8006694:	9b02      	ldr	r3, [sp, #8]
 8006696:	2200      	movs	r2, #0
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	b01c      	add	sp, #112	; 0x70
 800669c:	f85d eb04 	ldr.w	lr, [sp], #4
 80066a0:	b003      	add	sp, #12
 80066a2:	4770      	bx	lr
 80066a4:	2000001c 	.word	0x2000001c
 80066a8:	ffff0208 	.word	0xffff0208

080066ac <__ssputs_r>:
 80066ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	688e      	ldr	r6, [r1, #8]
 80066b2:	429e      	cmp	r6, r3
 80066b4:	4682      	mov	sl, r0
 80066b6:	460c      	mov	r4, r1
 80066b8:	4690      	mov	r8, r2
 80066ba:	4699      	mov	r9, r3
 80066bc:	d837      	bhi.n	800672e <__ssputs_r+0x82>
 80066be:	898a      	ldrh	r2, [r1, #12]
 80066c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066c4:	d031      	beq.n	800672a <__ssputs_r+0x7e>
 80066c6:	6825      	ldr	r5, [r4, #0]
 80066c8:	6909      	ldr	r1, [r1, #16]
 80066ca:	1a6f      	subs	r7, r5, r1
 80066cc:	6965      	ldr	r5, [r4, #20]
 80066ce:	2302      	movs	r3, #2
 80066d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80066d8:	f109 0301 	add.w	r3, r9, #1
 80066dc:	443b      	add	r3, r7
 80066de:	429d      	cmp	r5, r3
 80066e0:	bf38      	it	cc
 80066e2:	461d      	movcc	r5, r3
 80066e4:	0553      	lsls	r3, r2, #21
 80066e6:	d530      	bpl.n	800674a <__ssputs_r+0x9e>
 80066e8:	4629      	mov	r1, r5
 80066ea:	f000 fb21 	bl	8006d30 <_malloc_r>
 80066ee:	4606      	mov	r6, r0
 80066f0:	b950      	cbnz	r0, 8006708 <__ssputs_r+0x5c>
 80066f2:	230c      	movs	r3, #12
 80066f4:	f8ca 3000 	str.w	r3, [sl]
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006708:	463a      	mov	r2, r7
 800670a:	6921      	ldr	r1, [r4, #16]
 800670c:	f7ff ff9a 	bl	8006644 <memcpy>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	6126      	str	r6, [r4, #16]
 800671e:	6165      	str	r5, [r4, #20]
 8006720:	443e      	add	r6, r7
 8006722:	1bed      	subs	r5, r5, r7
 8006724:	6026      	str	r6, [r4, #0]
 8006726:	60a5      	str	r5, [r4, #8]
 8006728:	464e      	mov	r6, r9
 800672a:	454e      	cmp	r6, r9
 800672c:	d900      	bls.n	8006730 <__ssputs_r+0x84>
 800672e:	464e      	mov	r6, r9
 8006730:	4632      	mov	r2, r6
 8006732:	4641      	mov	r1, r8
 8006734:	6820      	ldr	r0, [r4, #0]
 8006736:	f000 fa93 	bl	8006c60 <memmove>
 800673a:	68a3      	ldr	r3, [r4, #8]
 800673c:	1b9b      	subs	r3, r3, r6
 800673e:	60a3      	str	r3, [r4, #8]
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	441e      	add	r6, r3
 8006744:	6026      	str	r6, [r4, #0]
 8006746:	2000      	movs	r0, #0
 8006748:	e7dc      	b.n	8006704 <__ssputs_r+0x58>
 800674a:	462a      	mov	r2, r5
 800674c:	f000 fb4a 	bl	8006de4 <_realloc_r>
 8006750:	4606      	mov	r6, r0
 8006752:	2800      	cmp	r0, #0
 8006754:	d1e2      	bne.n	800671c <__ssputs_r+0x70>
 8006756:	6921      	ldr	r1, [r4, #16]
 8006758:	4650      	mov	r0, sl
 800675a:	f000 fa9b 	bl	8006c94 <_free_r>
 800675e:	e7c8      	b.n	80066f2 <__ssputs_r+0x46>

08006760 <_svfiprintf_r>:
 8006760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	461d      	mov	r5, r3
 8006766:	898b      	ldrh	r3, [r1, #12]
 8006768:	061f      	lsls	r7, r3, #24
 800676a:	b09d      	sub	sp, #116	; 0x74
 800676c:	4680      	mov	r8, r0
 800676e:	460c      	mov	r4, r1
 8006770:	4616      	mov	r6, r2
 8006772:	d50f      	bpl.n	8006794 <_svfiprintf_r+0x34>
 8006774:	690b      	ldr	r3, [r1, #16]
 8006776:	b96b      	cbnz	r3, 8006794 <_svfiprintf_r+0x34>
 8006778:	2140      	movs	r1, #64	; 0x40
 800677a:	f000 fad9 	bl	8006d30 <_malloc_r>
 800677e:	6020      	str	r0, [r4, #0]
 8006780:	6120      	str	r0, [r4, #16]
 8006782:	b928      	cbnz	r0, 8006790 <_svfiprintf_r+0x30>
 8006784:	230c      	movs	r3, #12
 8006786:	f8c8 3000 	str.w	r3, [r8]
 800678a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800678e:	e0c8      	b.n	8006922 <_svfiprintf_r+0x1c2>
 8006790:	2340      	movs	r3, #64	; 0x40
 8006792:	6163      	str	r3, [r4, #20]
 8006794:	2300      	movs	r3, #0
 8006796:	9309      	str	r3, [sp, #36]	; 0x24
 8006798:	2320      	movs	r3, #32
 800679a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800679e:	2330      	movs	r3, #48	; 0x30
 80067a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067a4:	9503      	str	r5, [sp, #12]
 80067a6:	f04f 0b01 	mov.w	fp, #1
 80067aa:	4637      	mov	r7, r6
 80067ac:	463d      	mov	r5, r7
 80067ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80067b2:	b10b      	cbz	r3, 80067b8 <_svfiprintf_r+0x58>
 80067b4:	2b25      	cmp	r3, #37	; 0x25
 80067b6:	d13e      	bne.n	8006836 <_svfiprintf_r+0xd6>
 80067b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80067bc:	d00b      	beq.n	80067d6 <_svfiprintf_r+0x76>
 80067be:	4653      	mov	r3, sl
 80067c0:	4632      	mov	r2, r6
 80067c2:	4621      	mov	r1, r4
 80067c4:	4640      	mov	r0, r8
 80067c6:	f7ff ff71 	bl	80066ac <__ssputs_r>
 80067ca:	3001      	adds	r0, #1
 80067cc:	f000 80a4 	beq.w	8006918 <_svfiprintf_r+0x1b8>
 80067d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d2:	4453      	add	r3, sl
 80067d4:	9309      	str	r3, [sp, #36]	; 0x24
 80067d6:	783b      	ldrb	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 809d 	beq.w	8006918 <_svfiprintf_r+0x1b8>
 80067de:	2300      	movs	r3, #0
 80067e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067e8:	9304      	str	r3, [sp, #16]
 80067ea:	9307      	str	r3, [sp, #28]
 80067ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067f0:	931a      	str	r3, [sp, #104]	; 0x68
 80067f2:	462f      	mov	r7, r5
 80067f4:	2205      	movs	r2, #5
 80067f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80067fa:	4850      	ldr	r0, [pc, #320]	; (800693c <_svfiprintf_r+0x1dc>)
 80067fc:	f7f9 fd28 	bl	8000250 <memchr>
 8006800:	9b04      	ldr	r3, [sp, #16]
 8006802:	b9d0      	cbnz	r0, 800683a <_svfiprintf_r+0xda>
 8006804:	06d9      	lsls	r1, r3, #27
 8006806:	bf44      	itt	mi
 8006808:	2220      	movmi	r2, #32
 800680a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800680e:	071a      	lsls	r2, r3, #28
 8006810:	bf44      	itt	mi
 8006812:	222b      	movmi	r2, #43	; 0x2b
 8006814:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006818:	782a      	ldrb	r2, [r5, #0]
 800681a:	2a2a      	cmp	r2, #42	; 0x2a
 800681c:	d015      	beq.n	800684a <_svfiprintf_r+0xea>
 800681e:	9a07      	ldr	r2, [sp, #28]
 8006820:	462f      	mov	r7, r5
 8006822:	2000      	movs	r0, #0
 8006824:	250a      	movs	r5, #10
 8006826:	4639      	mov	r1, r7
 8006828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800682c:	3b30      	subs	r3, #48	; 0x30
 800682e:	2b09      	cmp	r3, #9
 8006830:	d94d      	bls.n	80068ce <_svfiprintf_r+0x16e>
 8006832:	b1b8      	cbz	r0, 8006864 <_svfiprintf_r+0x104>
 8006834:	e00f      	b.n	8006856 <_svfiprintf_r+0xf6>
 8006836:	462f      	mov	r7, r5
 8006838:	e7b8      	b.n	80067ac <_svfiprintf_r+0x4c>
 800683a:	4a40      	ldr	r2, [pc, #256]	; (800693c <_svfiprintf_r+0x1dc>)
 800683c:	1a80      	subs	r0, r0, r2
 800683e:	fa0b f000 	lsl.w	r0, fp, r0
 8006842:	4318      	orrs	r0, r3
 8006844:	9004      	str	r0, [sp, #16]
 8006846:	463d      	mov	r5, r7
 8006848:	e7d3      	b.n	80067f2 <_svfiprintf_r+0x92>
 800684a:	9a03      	ldr	r2, [sp, #12]
 800684c:	1d11      	adds	r1, r2, #4
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	9103      	str	r1, [sp, #12]
 8006852:	2a00      	cmp	r2, #0
 8006854:	db01      	blt.n	800685a <_svfiprintf_r+0xfa>
 8006856:	9207      	str	r2, [sp, #28]
 8006858:	e004      	b.n	8006864 <_svfiprintf_r+0x104>
 800685a:	4252      	negs	r2, r2
 800685c:	f043 0302 	orr.w	r3, r3, #2
 8006860:	9207      	str	r2, [sp, #28]
 8006862:	9304      	str	r3, [sp, #16]
 8006864:	783b      	ldrb	r3, [r7, #0]
 8006866:	2b2e      	cmp	r3, #46	; 0x2e
 8006868:	d10c      	bne.n	8006884 <_svfiprintf_r+0x124>
 800686a:	787b      	ldrb	r3, [r7, #1]
 800686c:	2b2a      	cmp	r3, #42	; 0x2a
 800686e:	d133      	bne.n	80068d8 <_svfiprintf_r+0x178>
 8006870:	9b03      	ldr	r3, [sp, #12]
 8006872:	1d1a      	adds	r2, r3, #4
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	9203      	str	r2, [sp, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	bfb8      	it	lt
 800687c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006880:	3702      	adds	r7, #2
 8006882:	9305      	str	r3, [sp, #20]
 8006884:	4d2e      	ldr	r5, [pc, #184]	; (8006940 <_svfiprintf_r+0x1e0>)
 8006886:	7839      	ldrb	r1, [r7, #0]
 8006888:	2203      	movs	r2, #3
 800688a:	4628      	mov	r0, r5
 800688c:	f7f9 fce0 	bl	8000250 <memchr>
 8006890:	b138      	cbz	r0, 80068a2 <_svfiprintf_r+0x142>
 8006892:	2340      	movs	r3, #64	; 0x40
 8006894:	1b40      	subs	r0, r0, r5
 8006896:	fa03 f000 	lsl.w	r0, r3, r0
 800689a:	9b04      	ldr	r3, [sp, #16]
 800689c:	4303      	orrs	r3, r0
 800689e:	3701      	adds	r7, #1
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	7839      	ldrb	r1, [r7, #0]
 80068a4:	4827      	ldr	r0, [pc, #156]	; (8006944 <_svfiprintf_r+0x1e4>)
 80068a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068aa:	2206      	movs	r2, #6
 80068ac:	1c7e      	adds	r6, r7, #1
 80068ae:	f7f9 fccf 	bl	8000250 <memchr>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d038      	beq.n	8006928 <_svfiprintf_r+0x1c8>
 80068b6:	4b24      	ldr	r3, [pc, #144]	; (8006948 <_svfiprintf_r+0x1e8>)
 80068b8:	bb13      	cbnz	r3, 8006900 <_svfiprintf_r+0x1a0>
 80068ba:	9b03      	ldr	r3, [sp, #12]
 80068bc:	3307      	adds	r3, #7
 80068be:	f023 0307 	bic.w	r3, r3, #7
 80068c2:	3308      	adds	r3, #8
 80068c4:	9303      	str	r3, [sp, #12]
 80068c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c8:	444b      	add	r3, r9
 80068ca:	9309      	str	r3, [sp, #36]	; 0x24
 80068cc:	e76d      	b.n	80067aa <_svfiprintf_r+0x4a>
 80068ce:	fb05 3202 	mla	r2, r5, r2, r3
 80068d2:	2001      	movs	r0, #1
 80068d4:	460f      	mov	r7, r1
 80068d6:	e7a6      	b.n	8006826 <_svfiprintf_r+0xc6>
 80068d8:	2300      	movs	r3, #0
 80068da:	3701      	adds	r7, #1
 80068dc:	9305      	str	r3, [sp, #20]
 80068de:	4619      	mov	r1, r3
 80068e0:	250a      	movs	r5, #10
 80068e2:	4638      	mov	r0, r7
 80068e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068e8:	3a30      	subs	r2, #48	; 0x30
 80068ea:	2a09      	cmp	r2, #9
 80068ec:	d903      	bls.n	80068f6 <_svfiprintf_r+0x196>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0c8      	beq.n	8006884 <_svfiprintf_r+0x124>
 80068f2:	9105      	str	r1, [sp, #20]
 80068f4:	e7c6      	b.n	8006884 <_svfiprintf_r+0x124>
 80068f6:	fb05 2101 	mla	r1, r5, r1, r2
 80068fa:	2301      	movs	r3, #1
 80068fc:	4607      	mov	r7, r0
 80068fe:	e7f0      	b.n	80068e2 <_svfiprintf_r+0x182>
 8006900:	ab03      	add	r3, sp, #12
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	4622      	mov	r2, r4
 8006906:	4b11      	ldr	r3, [pc, #68]	; (800694c <_svfiprintf_r+0x1ec>)
 8006908:	a904      	add	r1, sp, #16
 800690a:	4640      	mov	r0, r8
 800690c:	f3af 8000 	nop.w
 8006910:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006914:	4681      	mov	r9, r0
 8006916:	d1d6      	bne.n	80068c6 <_svfiprintf_r+0x166>
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	065b      	lsls	r3, r3, #25
 800691c:	f53f af35 	bmi.w	800678a <_svfiprintf_r+0x2a>
 8006920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006922:	b01d      	add	sp, #116	; 0x74
 8006924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006928:	ab03      	add	r3, sp, #12
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	4622      	mov	r2, r4
 800692e:	4b07      	ldr	r3, [pc, #28]	; (800694c <_svfiprintf_r+0x1ec>)
 8006930:	a904      	add	r1, sp, #16
 8006932:	4640      	mov	r0, r8
 8006934:	f000 f882 	bl	8006a3c <_printf_i>
 8006938:	e7ea      	b.n	8006910 <_svfiprintf_r+0x1b0>
 800693a:	bf00      	nop
 800693c:	08006ec8 	.word	0x08006ec8
 8006940:	08006ece 	.word	0x08006ece
 8006944:	08006ed2 	.word	0x08006ed2
 8006948:	00000000 	.word	0x00000000
 800694c:	080066ad 	.word	0x080066ad

08006950 <_printf_common>:
 8006950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	4691      	mov	r9, r2
 8006956:	461f      	mov	r7, r3
 8006958:	688a      	ldr	r2, [r1, #8]
 800695a:	690b      	ldr	r3, [r1, #16]
 800695c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006960:	4293      	cmp	r3, r2
 8006962:	bfb8      	it	lt
 8006964:	4613      	movlt	r3, r2
 8006966:	f8c9 3000 	str.w	r3, [r9]
 800696a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800696e:	4606      	mov	r6, r0
 8006970:	460c      	mov	r4, r1
 8006972:	b112      	cbz	r2, 800697a <_printf_common+0x2a>
 8006974:	3301      	adds	r3, #1
 8006976:	f8c9 3000 	str.w	r3, [r9]
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	0699      	lsls	r1, r3, #26
 800697e:	bf42      	ittt	mi
 8006980:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006984:	3302      	addmi	r3, #2
 8006986:	f8c9 3000 	strmi.w	r3, [r9]
 800698a:	6825      	ldr	r5, [r4, #0]
 800698c:	f015 0506 	ands.w	r5, r5, #6
 8006990:	d107      	bne.n	80069a2 <_printf_common+0x52>
 8006992:	f104 0a19 	add.w	sl, r4, #25
 8006996:	68e3      	ldr	r3, [r4, #12]
 8006998:	f8d9 2000 	ldr.w	r2, [r9]
 800699c:	1a9b      	subs	r3, r3, r2
 800699e:	42ab      	cmp	r3, r5
 80069a0:	dc28      	bgt.n	80069f4 <_printf_common+0xa4>
 80069a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80069a6:	6822      	ldr	r2, [r4, #0]
 80069a8:	3300      	adds	r3, #0
 80069aa:	bf18      	it	ne
 80069ac:	2301      	movne	r3, #1
 80069ae:	0692      	lsls	r2, r2, #26
 80069b0:	d42d      	bmi.n	8006a0e <_printf_common+0xbe>
 80069b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069b6:	4639      	mov	r1, r7
 80069b8:	4630      	mov	r0, r6
 80069ba:	47c0      	blx	r8
 80069bc:	3001      	adds	r0, #1
 80069be:	d020      	beq.n	8006a02 <_printf_common+0xb2>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	68e5      	ldr	r5, [r4, #12]
 80069c4:	f8d9 2000 	ldr.w	r2, [r9]
 80069c8:	f003 0306 	and.w	r3, r3, #6
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	bf08      	it	eq
 80069d0:	1aad      	subeq	r5, r5, r2
 80069d2:	68a3      	ldr	r3, [r4, #8]
 80069d4:	6922      	ldr	r2, [r4, #16]
 80069d6:	bf0c      	ite	eq
 80069d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069dc:	2500      	movne	r5, #0
 80069de:	4293      	cmp	r3, r2
 80069e0:	bfc4      	itt	gt
 80069e2:	1a9b      	subgt	r3, r3, r2
 80069e4:	18ed      	addgt	r5, r5, r3
 80069e6:	f04f 0900 	mov.w	r9, #0
 80069ea:	341a      	adds	r4, #26
 80069ec:	454d      	cmp	r5, r9
 80069ee:	d11a      	bne.n	8006a26 <_printf_common+0xd6>
 80069f0:	2000      	movs	r0, #0
 80069f2:	e008      	b.n	8006a06 <_printf_common+0xb6>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4652      	mov	r2, sl
 80069f8:	4639      	mov	r1, r7
 80069fa:	4630      	mov	r0, r6
 80069fc:	47c0      	blx	r8
 80069fe:	3001      	adds	r0, #1
 8006a00:	d103      	bne.n	8006a0a <_printf_common+0xba>
 8006a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0a:	3501      	adds	r5, #1
 8006a0c:	e7c3      	b.n	8006996 <_printf_common+0x46>
 8006a0e:	18e1      	adds	r1, r4, r3
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	2030      	movs	r0, #48	; 0x30
 8006a14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a18:	4422      	add	r2, r4
 8006a1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a22:	3302      	adds	r3, #2
 8006a24:	e7c5      	b.n	80069b2 <_printf_common+0x62>
 8006a26:	2301      	movs	r3, #1
 8006a28:	4622      	mov	r2, r4
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	47c0      	blx	r8
 8006a30:	3001      	adds	r0, #1
 8006a32:	d0e6      	beq.n	8006a02 <_printf_common+0xb2>
 8006a34:	f109 0901 	add.w	r9, r9, #1
 8006a38:	e7d8      	b.n	80069ec <_printf_common+0x9c>
	...

08006a3c <_printf_i>:
 8006a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006a44:	460c      	mov	r4, r1
 8006a46:	7e09      	ldrb	r1, [r1, #24]
 8006a48:	b085      	sub	sp, #20
 8006a4a:	296e      	cmp	r1, #110	; 0x6e
 8006a4c:	4617      	mov	r7, r2
 8006a4e:	4606      	mov	r6, r0
 8006a50:	4698      	mov	r8, r3
 8006a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a54:	f000 80b3 	beq.w	8006bbe <_printf_i+0x182>
 8006a58:	d822      	bhi.n	8006aa0 <_printf_i+0x64>
 8006a5a:	2963      	cmp	r1, #99	; 0x63
 8006a5c:	d036      	beq.n	8006acc <_printf_i+0x90>
 8006a5e:	d80a      	bhi.n	8006a76 <_printf_i+0x3a>
 8006a60:	2900      	cmp	r1, #0
 8006a62:	f000 80b9 	beq.w	8006bd8 <_printf_i+0x19c>
 8006a66:	2958      	cmp	r1, #88	; 0x58
 8006a68:	f000 8083 	beq.w	8006b72 <_printf_i+0x136>
 8006a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006a74:	e032      	b.n	8006adc <_printf_i+0xa0>
 8006a76:	2964      	cmp	r1, #100	; 0x64
 8006a78:	d001      	beq.n	8006a7e <_printf_i+0x42>
 8006a7a:	2969      	cmp	r1, #105	; 0x69
 8006a7c:	d1f6      	bne.n	8006a6c <_printf_i+0x30>
 8006a7e:	6820      	ldr	r0, [r4, #0]
 8006a80:	6813      	ldr	r3, [r2, #0]
 8006a82:	0605      	lsls	r5, r0, #24
 8006a84:	f103 0104 	add.w	r1, r3, #4
 8006a88:	d52a      	bpl.n	8006ae0 <_printf_i+0xa4>
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6011      	str	r1, [r2, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	da03      	bge.n	8006a9a <_printf_i+0x5e>
 8006a92:	222d      	movs	r2, #45	; 0x2d
 8006a94:	425b      	negs	r3, r3
 8006a96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006a9a:	486f      	ldr	r0, [pc, #444]	; (8006c58 <_printf_i+0x21c>)
 8006a9c:	220a      	movs	r2, #10
 8006a9e:	e039      	b.n	8006b14 <_printf_i+0xd8>
 8006aa0:	2973      	cmp	r1, #115	; 0x73
 8006aa2:	f000 809d 	beq.w	8006be0 <_printf_i+0x1a4>
 8006aa6:	d808      	bhi.n	8006aba <_printf_i+0x7e>
 8006aa8:	296f      	cmp	r1, #111	; 0x6f
 8006aaa:	d020      	beq.n	8006aee <_printf_i+0xb2>
 8006aac:	2970      	cmp	r1, #112	; 0x70
 8006aae:	d1dd      	bne.n	8006a6c <_printf_i+0x30>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	f043 0320 	orr.w	r3, r3, #32
 8006ab6:	6023      	str	r3, [r4, #0]
 8006ab8:	e003      	b.n	8006ac2 <_printf_i+0x86>
 8006aba:	2975      	cmp	r1, #117	; 0x75
 8006abc:	d017      	beq.n	8006aee <_printf_i+0xb2>
 8006abe:	2978      	cmp	r1, #120	; 0x78
 8006ac0:	d1d4      	bne.n	8006a6c <_printf_i+0x30>
 8006ac2:	2378      	movs	r3, #120	; 0x78
 8006ac4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ac8:	4864      	ldr	r0, [pc, #400]	; (8006c5c <_printf_i+0x220>)
 8006aca:	e055      	b.n	8006b78 <_printf_i+0x13c>
 8006acc:	6813      	ldr	r3, [r2, #0]
 8006ace:	1d19      	adds	r1, r3, #4
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6011      	str	r1, [r2, #0]
 8006ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006adc:	2301      	movs	r3, #1
 8006ade:	e08c      	b.n	8006bfa <_printf_i+0x1be>
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6011      	str	r1, [r2, #0]
 8006ae4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ae8:	bf18      	it	ne
 8006aea:	b21b      	sxthne	r3, r3
 8006aec:	e7cf      	b.n	8006a8e <_printf_i+0x52>
 8006aee:	6813      	ldr	r3, [r2, #0]
 8006af0:	6825      	ldr	r5, [r4, #0]
 8006af2:	1d18      	adds	r0, r3, #4
 8006af4:	6010      	str	r0, [r2, #0]
 8006af6:	0628      	lsls	r0, r5, #24
 8006af8:	d501      	bpl.n	8006afe <_printf_i+0xc2>
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	e002      	b.n	8006b04 <_printf_i+0xc8>
 8006afe:	0668      	lsls	r0, r5, #25
 8006b00:	d5fb      	bpl.n	8006afa <_printf_i+0xbe>
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	4854      	ldr	r0, [pc, #336]	; (8006c58 <_printf_i+0x21c>)
 8006b06:	296f      	cmp	r1, #111	; 0x6f
 8006b08:	bf14      	ite	ne
 8006b0a:	220a      	movne	r2, #10
 8006b0c:	2208      	moveq	r2, #8
 8006b0e:	2100      	movs	r1, #0
 8006b10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b14:	6865      	ldr	r5, [r4, #4]
 8006b16:	60a5      	str	r5, [r4, #8]
 8006b18:	2d00      	cmp	r5, #0
 8006b1a:	f2c0 8095 	blt.w	8006c48 <_printf_i+0x20c>
 8006b1e:	6821      	ldr	r1, [r4, #0]
 8006b20:	f021 0104 	bic.w	r1, r1, #4
 8006b24:	6021      	str	r1, [r4, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d13d      	bne.n	8006ba6 <_printf_i+0x16a>
 8006b2a:	2d00      	cmp	r5, #0
 8006b2c:	f040 808e 	bne.w	8006c4c <_printf_i+0x210>
 8006b30:	4665      	mov	r5, ip
 8006b32:	2a08      	cmp	r2, #8
 8006b34:	d10b      	bne.n	8006b4e <_printf_i+0x112>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	07db      	lsls	r3, r3, #31
 8006b3a:	d508      	bpl.n	8006b4e <_printf_i+0x112>
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	6862      	ldr	r2, [r4, #4]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	bfde      	ittt	le
 8006b44:	2330      	movle	r3, #48	; 0x30
 8006b46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b4a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b4e:	ebac 0305 	sub.w	r3, ip, r5
 8006b52:	6123      	str	r3, [r4, #16]
 8006b54:	f8cd 8000 	str.w	r8, [sp]
 8006b58:	463b      	mov	r3, r7
 8006b5a:	aa03      	add	r2, sp, #12
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f7ff fef6 	bl	8006950 <_printf_common>
 8006b64:	3001      	adds	r0, #1
 8006b66:	d14d      	bne.n	8006c04 <_printf_i+0x1c8>
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b6c:	b005      	add	sp, #20
 8006b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b72:	4839      	ldr	r0, [pc, #228]	; (8006c58 <_printf_i+0x21c>)
 8006b74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006b78:	6813      	ldr	r3, [r2, #0]
 8006b7a:	6821      	ldr	r1, [r4, #0]
 8006b7c:	1d1d      	adds	r5, r3, #4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6015      	str	r5, [r2, #0]
 8006b82:	060a      	lsls	r2, r1, #24
 8006b84:	d50b      	bpl.n	8006b9e <_printf_i+0x162>
 8006b86:	07ca      	lsls	r2, r1, #31
 8006b88:	bf44      	itt	mi
 8006b8a:	f041 0120 	orrmi.w	r1, r1, #32
 8006b8e:	6021      	strmi	r1, [r4, #0]
 8006b90:	b91b      	cbnz	r3, 8006b9a <_printf_i+0x15e>
 8006b92:	6822      	ldr	r2, [r4, #0]
 8006b94:	f022 0220 	bic.w	r2, r2, #32
 8006b98:	6022      	str	r2, [r4, #0]
 8006b9a:	2210      	movs	r2, #16
 8006b9c:	e7b7      	b.n	8006b0e <_printf_i+0xd2>
 8006b9e:	064d      	lsls	r5, r1, #25
 8006ba0:	bf48      	it	mi
 8006ba2:	b29b      	uxthmi	r3, r3
 8006ba4:	e7ef      	b.n	8006b86 <_printf_i+0x14a>
 8006ba6:	4665      	mov	r5, ip
 8006ba8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bac:	fb02 3311 	mls	r3, r2, r1, r3
 8006bb0:	5cc3      	ldrb	r3, [r0, r3]
 8006bb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	2900      	cmp	r1, #0
 8006bba:	d1f5      	bne.n	8006ba8 <_printf_i+0x16c>
 8006bbc:	e7b9      	b.n	8006b32 <_printf_i+0xf6>
 8006bbe:	6813      	ldr	r3, [r2, #0]
 8006bc0:	6825      	ldr	r5, [r4, #0]
 8006bc2:	6961      	ldr	r1, [r4, #20]
 8006bc4:	1d18      	adds	r0, r3, #4
 8006bc6:	6010      	str	r0, [r2, #0]
 8006bc8:	0628      	lsls	r0, r5, #24
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	d501      	bpl.n	8006bd2 <_printf_i+0x196>
 8006bce:	6019      	str	r1, [r3, #0]
 8006bd0:	e002      	b.n	8006bd8 <_printf_i+0x19c>
 8006bd2:	066a      	lsls	r2, r5, #25
 8006bd4:	d5fb      	bpl.n	8006bce <_printf_i+0x192>
 8006bd6:	8019      	strh	r1, [r3, #0]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	4665      	mov	r5, ip
 8006bde:	e7b9      	b.n	8006b54 <_printf_i+0x118>
 8006be0:	6813      	ldr	r3, [r2, #0]
 8006be2:	1d19      	adds	r1, r3, #4
 8006be4:	6011      	str	r1, [r2, #0]
 8006be6:	681d      	ldr	r5, [r3, #0]
 8006be8:	6862      	ldr	r2, [r4, #4]
 8006bea:	2100      	movs	r1, #0
 8006bec:	4628      	mov	r0, r5
 8006bee:	f7f9 fb2f 	bl	8000250 <memchr>
 8006bf2:	b108      	cbz	r0, 8006bf8 <_printf_i+0x1bc>
 8006bf4:	1b40      	subs	r0, r0, r5
 8006bf6:	6060      	str	r0, [r4, #4]
 8006bf8:	6863      	ldr	r3, [r4, #4]
 8006bfa:	6123      	str	r3, [r4, #16]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c02:	e7a7      	b.n	8006b54 <_printf_i+0x118>
 8006c04:	6923      	ldr	r3, [r4, #16]
 8006c06:	462a      	mov	r2, r5
 8006c08:	4639      	mov	r1, r7
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	47c0      	blx	r8
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d0aa      	beq.n	8006b68 <_printf_i+0x12c>
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	079b      	lsls	r3, r3, #30
 8006c16:	d413      	bmi.n	8006c40 <_printf_i+0x204>
 8006c18:	68e0      	ldr	r0, [r4, #12]
 8006c1a:	9b03      	ldr	r3, [sp, #12]
 8006c1c:	4298      	cmp	r0, r3
 8006c1e:	bfb8      	it	lt
 8006c20:	4618      	movlt	r0, r3
 8006c22:	e7a3      	b.n	8006b6c <_printf_i+0x130>
 8006c24:	2301      	movs	r3, #1
 8006c26:	464a      	mov	r2, r9
 8006c28:	4639      	mov	r1, r7
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	47c0      	blx	r8
 8006c2e:	3001      	adds	r0, #1
 8006c30:	d09a      	beq.n	8006b68 <_printf_i+0x12c>
 8006c32:	3501      	adds	r5, #1
 8006c34:	68e3      	ldr	r3, [r4, #12]
 8006c36:	9a03      	ldr	r2, [sp, #12]
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	42ab      	cmp	r3, r5
 8006c3c:	dcf2      	bgt.n	8006c24 <_printf_i+0x1e8>
 8006c3e:	e7eb      	b.n	8006c18 <_printf_i+0x1dc>
 8006c40:	2500      	movs	r5, #0
 8006c42:	f104 0919 	add.w	r9, r4, #25
 8006c46:	e7f5      	b.n	8006c34 <_printf_i+0x1f8>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1ac      	bne.n	8006ba6 <_printf_i+0x16a>
 8006c4c:	7803      	ldrb	r3, [r0, #0]
 8006c4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c56:	e76c      	b.n	8006b32 <_printf_i+0xf6>
 8006c58:	08006ed9 	.word	0x08006ed9
 8006c5c:	08006eea 	.word	0x08006eea

08006c60 <memmove>:
 8006c60:	4288      	cmp	r0, r1
 8006c62:	b510      	push	{r4, lr}
 8006c64:	eb01 0302 	add.w	r3, r1, r2
 8006c68:	d807      	bhi.n	8006c7a <memmove+0x1a>
 8006c6a:	1e42      	subs	r2, r0, #1
 8006c6c:	4299      	cmp	r1, r3
 8006c6e:	d00a      	beq.n	8006c86 <memmove+0x26>
 8006c70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c74:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006c78:	e7f8      	b.n	8006c6c <memmove+0xc>
 8006c7a:	4283      	cmp	r3, r0
 8006c7c:	d9f5      	bls.n	8006c6a <memmove+0xa>
 8006c7e:	1881      	adds	r1, r0, r2
 8006c80:	1ad2      	subs	r2, r2, r3
 8006c82:	42d3      	cmn	r3, r2
 8006c84:	d100      	bne.n	8006c88 <memmove+0x28>
 8006c86:	bd10      	pop	{r4, pc}
 8006c88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c8c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c90:	e7f7      	b.n	8006c82 <memmove+0x22>
	...

08006c94 <_free_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4605      	mov	r5, r0
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	d045      	beq.n	8006d28 <_free_r+0x94>
 8006c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ca0:	1f0c      	subs	r4, r1, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	bfb8      	it	lt
 8006ca6:	18e4      	addlt	r4, r4, r3
 8006ca8:	f000 f8d2 	bl	8006e50 <__malloc_lock>
 8006cac:	4a1f      	ldr	r2, [pc, #124]	; (8006d2c <_free_r+0x98>)
 8006cae:	6813      	ldr	r3, [r2, #0]
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	b933      	cbnz	r3, 8006cc2 <_free_r+0x2e>
 8006cb4:	6063      	str	r3, [r4, #4]
 8006cb6:	6014      	str	r4, [r2, #0]
 8006cb8:	4628      	mov	r0, r5
 8006cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cbe:	f000 b8c8 	b.w	8006e52 <__malloc_unlock>
 8006cc2:	42a3      	cmp	r3, r4
 8006cc4:	d90c      	bls.n	8006ce0 <_free_r+0x4c>
 8006cc6:	6821      	ldr	r1, [r4, #0]
 8006cc8:	1862      	adds	r2, r4, r1
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	bf04      	itt	eq
 8006cce:	681a      	ldreq	r2, [r3, #0]
 8006cd0:	685b      	ldreq	r3, [r3, #4]
 8006cd2:	6063      	str	r3, [r4, #4]
 8006cd4:	bf04      	itt	eq
 8006cd6:	1852      	addeq	r2, r2, r1
 8006cd8:	6022      	streq	r2, [r4, #0]
 8006cda:	6004      	str	r4, [r0, #0]
 8006cdc:	e7ec      	b.n	8006cb8 <_free_r+0x24>
 8006cde:	4613      	mov	r3, r2
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	b10a      	cbz	r2, 8006ce8 <_free_r+0x54>
 8006ce4:	42a2      	cmp	r2, r4
 8006ce6:	d9fa      	bls.n	8006cde <_free_r+0x4a>
 8006ce8:	6819      	ldr	r1, [r3, #0]
 8006cea:	1858      	adds	r0, r3, r1
 8006cec:	42a0      	cmp	r0, r4
 8006cee:	d10b      	bne.n	8006d08 <_free_r+0x74>
 8006cf0:	6820      	ldr	r0, [r4, #0]
 8006cf2:	4401      	add	r1, r0
 8006cf4:	1858      	adds	r0, r3, r1
 8006cf6:	4282      	cmp	r2, r0
 8006cf8:	6019      	str	r1, [r3, #0]
 8006cfa:	d1dd      	bne.n	8006cb8 <_free_r+0x24>
 8006cfc:	6810      	ldr	r0, [r2, #0]
 8006cfe:	6852      	ldr	r2, [r2, #4]
 8006d00:	605a      	str	r2, [r3, #4]
 8006d02:	4401      	add	r1, r0
 8006d04:	6019      	str	r1, [r3, #0]
 8006d06:	e7d7      	b.n	8006cb8 <_free_r+0x24>
 8006d08:	d902      	bls.n	8006d10 <_free_r+0x7c>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	e7d3      	b.n	8006cb8 <_free_r+0x24>
 8006d10:	6820      	ldr	r0, [r4, #0]
 8006d12:	1821      	adds	r1, r4, r0
 8006d14:	428a      	cmp	r2, r1
 8006d16:	bf04      	itt	eq
 8006d18:	6811      	ldreq	r1, [r2, #0]
 8006d1a:	6852      	ldreq	r2, [r2, #4]
 8006d1c:	6062      	str	r2, [r4, #4]
 8006d1e:	bf04      	itt	eq
 8006d20:	1809      	addeq	r1, r1, r0
 8006d22:	6021      	streq	r1, [r4, #0]
 8006d24:	605c      	str	r4, [r3, #4]
 8006d26:	e7c7      	b.n	8006cb8 <_free_r+0x24>
 8006d28:	bd38      	pop	{r3, r4, r5, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20004aa8 	.word	0x20004aa8

08006d30 <_malloc_r>:
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	1ccd      	adds	r5, r1, #3
 8006d34:	f025 0503 	bic.w	r5, r5, #3
 8006d38:	3508      	adds	r5, #8
 8006d3a:	2d0c      	cmp	r5, #12
 8006d3c:	bf38      	it	cc
 8006d3e:	250c      	movcc	r5, #12
 8006d40:	2d00      	cmp	r5, #0
 8006d42:	4606      	mov	r6, r0
 8006d44:	db01      	blt.n	8006d4a <_malloc_r+0x1a>
 8006d46:	42a9      	cmp	r1, r5
 8006d48:	d903      	bls.n	8006d52 <_malloc_r+0x22>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	6033      	str	r3, [r6, #0]
 8006d4e:	2000      	movs	r0, #0
 8006d50:	bd70      	pop	{r4, r5, r6, pc}
 8006d52:	f000 f87d 	bl	8006e50 <__malloc_lock>
 8006d56:	4a21      	ldr	r2, [pc, #132]	; (8006ddc <_malloc_r+0xac>)
 8006d58:	6814      	ldr	r4, [r2, #0]
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	b991      	cbnz	r1, 8006d84 <_malloc_r+0x54>
 8006d5e:	4c20      	ldr	r4, [pc, #128]	; (8006de0 <_malloc_r+0xb0>)
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	b91b      	cbnz	r3, 8006d6c <_malloc_r+0x3c>
 8006d64:	4630      	mov	r0, r6
 8006d66:	f000 f863 	bl	8006e30 <_sbrk_r>
 8006d6a:	6020      	str	r0, [r4, #0]
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f000 f85e 	bl	8006e30 <_sbrk_r>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d124      	bne.n	8006dc2 <_malloc_r+0x92>
 8006d78:	230c      	movs	r3, #12
 8006d7a:	6033      	str	r3, [r6, #0]
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f000 f868 	bl	8006e52 <__malloc_unlock>
 8006d82:	e7e4      	b.n	8006d4e <_malloc_r+0x1e>
 8006d84:	680b      	ldr	r3, [r1, #0]
 8006d86:	1b5b      	subs	r3, r3, r5
 8006d88:	d418      	bmi.n	8006dbc <_malloc_r+0x8c>
 8006d8a:	2b0b      	cmp	r3, #11
 8006d8c:	d90f      	bls.n	8006dae <_malloc_r+0x7e>
 8006d8e:	600b      	str	r3, [r1, #0]
 8006d90:	50cd      	str	r5, [r1, r3]
 8006d92:	18cc      	adds	r4, r1, r3
 8006d94:	4630      	mov	r0, r6
 8006d96:	f000 f85c 	bl	8006e52 <__malloc_unlock>
 8006d9a:	f104 000b 	add.w	r0, r4, #11
 8006d9e:	1d23      	adds	r3, r4, #4
 8006da0:	f020 0007 	bic.w	r0, r0, #7
 8006da4:	1ac3      	subs	r3, r0, r3
 8006da6:	d0d3      	beq.n	8006d50 <_malloc_r+0x20>
 8006da8:	425a      	negs	r2, r3
 8006daa:	50e2      	str	r2, [r4, r3]
 8006dac:	e7d0      	b.n	8006d50 <_malloc_r+0x20>
 8006dae:	428c      	cmp	r4, r1
 8006db0:	684b      	ldr	r3, [r1, #4]
 8006db2:	bf16      	itet	ne
 8006db4:	6063      	strne	r3, [r4, #4]
 8006db6:	6013      	streq	r3, [r2, #0]
 8006db8:	460c      	movne	r4, r1
 8006dba:	e7eb      	b.n	8006d94 <_malloc_r+0x64>
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	6849      	ldr	r1, [r1, #4]
 8006dc0:	e7cc      	b.n	8006d5c <_malloc_r+0x2c>
 8006dc2:	1cc4      	adds	r4, r0, #3
 8006dc4:	f024 0403 	bic.w	r4, r4, #3
 8006dc8:	42a0      	cmp	r0, r4
 8006dca:	d005      	beq.n	8006dd8 <_malloc_r+0xa8>
 8006dcc:	1a21      	subs	r1, r4, r0
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f000 f82e 	bl	8006e30 <_sbrk_r>
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d0cf      	beq.n	8006d78 <_malloc_r+0x48>
 8006dd8:	6025      	str	r5, [r4, #0]
 8006dda:	e7db      	b.n	8006d94 <_malloc_r+0x64>
 8006ddc:	20004aa8 	.word	0x20004aa8
 8006de0:	20004aac 	.word	0x20004aac

08006de4 <_realloc_r>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	4607      	mov	r7, r0
 8006de8:	4614      	mov	r4, r2
 8006dea:	460e      	mov	r6, r1
 8006dec:	b921      	cbnz	r1, 8006df8 <_realloc_r+0x14>
 8006dee:	4611      	mov	r1, r2
 8006df0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006df4:	f7ff bf9c 	b.w	8006d30 <_malloc_r>
 8006df8:	b922      	cbnz	r2, 8006e04 <_realloc_r+0x20>
 8006dfa:	f7ff ff4b 	bl	8006c94 <_free_r>
 8006dfe:	4625      	mov	r5, r4
 8006e00:	4628      	mov	r0, r5
 8006e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e04:	f000 f826 	bl	8006e54 <_malloc_usable_size_r>
 8006e08:	42a0      	cmp	r0, r4
 8006e0a:	d20f      	bcs.n	8006e2c <_realloc_r+0x48>
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f7ff ff8e 	bl	8006d30 <_malloc_r>
 8006e14:	4605      	mov	r5, r0
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d0f2      	beq.n	8006e00 <_realloc_r+0x1c>
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	f7ff fc11 	bl	8006644 <memcpy>
 8006e22:	4631      	mov	r1, r6
 8006e24:	4638      	mov	r0, r7
 8006e26:	f7ff ff35 	bl	8006c94 <_free_r>
 8006e2a:	e7e9      	b.n	8006e00 <_realloc_r+0x1c>
 8006e2c:	4635      	mov	r5, r6
 8006e2e:	e7e7      	b.n	8006e00 <_realloc_r+0x1c>

08006e30 <_sbrk_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4c06      	ldr	r4, [pc, #24]	; (8006e4c <_sbrk_r+0x1c>)
 8006e34:	2300      	movs	r3, #0
 8006e36:	4605      	mov	r5, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	f7ff fb4c 	bl	80064d8 <_sbrk>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_sbrk_r+0x1a>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_sbrk_r+0x1a>
 8006e48:	602b      	str	r3, [r5, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	20004bd4 	.word	0x20004bd4

08006e50 <__malloc_lock>:
 8006e50:	4770      	bx	lr

08006e52 <__malloc_unlock>:
 8006e52:	4770      	bx	lr

08006e54 <_malloc_usable_size_r>:
 8006e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e58:	1f18      	subs	r0, r3, #4
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	bfbc      	itt	lt
 8006e5e:	580b      	ldrlt	r3, [r1, r0]
 8006e60:	18c0      	addlt	r0, r0, r3
 8006e62:	4770      	bx	lr

08006e64 <_init>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	bf00      	nop
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr

08006e70 <_fini>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr
